[
  {
    "objectID": "posts/online-retail-mba/index.html",
    "href": "posts/online-retail-mba/index.html",
    "title": "üõí Using Market Basket Analysis to penetrate an untapped regional market",
    "section": "",
    "text": "Even though the majority of the volume of sales is concentrated in the UK, the most performing region in terms of average revenue is Asia. The ANOVA analysis shows that the mean purchase value in the Asia/Pacific region is consistently and significantly higher than the mean purchase value in the other regions. We can infer that the Asia/Pacific region is a potentially lucrative market with higher average purchase amounts than the other regions. Therefore, the store may want to consider investing more resources in this region to take advantage of this opportunity to increase volume of sales.\nBy conducting a market basket analysis with a focus on the Asian market, we have identified groups of products that are commonly bought together. This has helped us uncover the specific preferences and purchasing patterns of this region. The firm could use this information to create bundled offers that combine these item sets and boost sales volume in the Asian market, ultimately leading to an increase in revenue."
  },
  {
    "objectID": "posts/online-retail-mba/index.html#key-findings-and-achievements",
    "href": "posts/online-retail-mba/index.html#key-findings-and-achievements",
    "title": "üõí Using Market Basket Analysis to penetrate an untapped regional market",
    "section": "",
    "text": "Even though the majority of the volume of sales is concentrated in the UK, the most performing region in terms of average revenue is Asia. The ANOVA analysis shows that the mean purchase value in the Asia/Pacific region is consistently and significantly higher than the mean purchase value in the other regions. We can infer that the Asia/Pacific region is a potentially lucrative market with higher average purchase amounts than the other regions. Therefore, the store may want to consider investing more resources in this region to take advantage of this opportunity to increase volume of sales.\nBy conducting a market basket analysis with a focus on the Asian market, we have identified groups of products that are commonly bought together. This has helped us uncover the specific preferences and purchasing patterns of this region. The firm could use this information to create bundled offers that combine these item sets and boost sales volume in the Asian market, ultimately leading to an increase in revenue."
  },
  {
    "objectID": "posts/online-retail-mba/index.html#introduction",
    "href": "posts/online-retail-mba/index.html#introduction",
    "title": "üõí Using Market Basket Analysis to penetrate an untapped regional market",
    "section": "Introduction",
    "text": "Introduction\nThe e-commerce industry has experienced significant growth in recent years, and online sales have become an increasingly important aspect of many businesses. Analyzing sales data can help businesses understand customer behavior and identify trends, which can then be used to improve their overall sales strategies and revenue. In this notebook, we will be analyzing a sales dataset from an e-commerce company to gain insights into their sales patterns and identify profitable opportunities.\nFirstly, we will delve into analyzing the regional distribution of sales to evaluate the existence of untapped markets. By assessing the sales data across different regions, we will determine the areas where our products are in high demand and identify potential opportunities for expanding our market presence.\nSecondly, we will conduct a market basket analysis to uncover correlations between products and provide recommendations for boosting sales. This will involve examining the patterns of product combinations that are frequently purchased together by customers. By identifying these relationships, we can optimize our marketing strategies to better meet the needs of our customers and ultimately increase revenue.\n\n\nCode\n# dataframes\nimport numpy as np\nimport pandas as pd\n\n# dataviz\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# from jupyterthemes import jtplot\n# jtplot.style(theme='monokai', context='notebook', grid=False)\n\n# hypothesis testing\nfrom scipy.stats import ttest_ind\nfrom scipy.stats import f_oneway\nfrom statsmodels.stats.multicomp import pairwise_tukeyhsd\n\n# market basket analysis\nfrom itertools import permutations\nfrom mlxtend.preprocessing import TransactionEncoder\nfrom mlxtend.frequent_patterns import apriori, association_rules\nfrom pandas.plotting import parallel_coordinates\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)"
  },
  {
    "objectID": "posts/online-retail-mba/index.html#data",
    "href": "posts/online-retail-mba/index.html#data",
    "title": "üõí Using Market Basket Analysis to penetrate an untapped regional market",
    "section": "Data",
    "text": "Data\nLet‚Äôs begin by taking a look at the data at our disposal. The dataset is composed by the following original variables:\n\nTransactionNo (categorical): a six-digit unique number that defines each transaction. The letter ‚ÄúC‚Äù in the code indicates a cancellation.\nDate (numeric): the date when each transaction was generated.\nProductNo (categorical): a five or six-digit unique character used to identify a specific product.\nProduct (categorical): product/item name.\nPrice (numeric): the price of each product per unit in pound sterling (¬£).\nQuantity (numeric): the quantity of each product per transaction. Negative values related to cancelled transactions.\nCustomerNo (categorical): a five-digit unique number that defines each customer.\nCountry (categorical): name of the country where the customer resides.\n\n\n\nCode\ndf = pd.read_csv('../../data/sales.csv')\n\n# We perform some operations to validate the type of variable, create an `Amount` column, \n# and subset the dataframe for an exact year of sales.\n\ndf['Date'] = pd.to_datetime(df['Date'])\ndf[['ProductNo', 'CustomerNo']] = df[['ProductNo', 'CustomerNo']].astype('object')\n\ndf['Amount'] = df['Quantity'] * df['Price']\n\ndf = df[(df['Date'] &lt;= '2019-11-30') & (df['Quantity'] &gt; 0)].copy()\n\ndisplay(df.info())\ndisplay(df)\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 502753 entries, 25361 to 536324\nData columns (total 9 columns):\n #   Column         Non-Null Count   Dtype         \n---  ------         --------------   -----         \n 0   TransactionNo  502753 non-null  object        \n 1   Date           502753 non-null  datetime64[ns]\n 2   ProductNo      502753 non-null  object        \n 3   ProductName    502753 non-null  object        \n 4   Price          502753 non-null  float64       \n 5   Quantity       502753 non-null  int64         \n 6   CustomerNo     502752 non-null  object        \n 7   Country        502753 non-null  object        \n 8   Amount         502753 non-null  float64       \ndtypes: datetime64[ns](1), float64(2), int64(1), object(5)\nmemory usage: 38.4+ MB\n\n\nNone\n\n\n\n\n\n\n\n\n\nTransactionNo\nDate\nProductNo\nProductName\nPrice\nQuantity\nCustomerNo\nCountry\nAmount\n\n\n\n\n25361\n579522\n2019-11-30\n84879\nAssorted Colour Bird Ornament\n6.04\n8\n14432.0\nUnited Kingdom\n48.32\n\n\n25362\n579522\n2019-11-30\n82486\n3 Drawer Antique White Wood Cabinet\n6.04\n4\n14432.0\nUnited Kingdom\n24.16\n\n\n25363\n579522\n2019-11-30\n82483\nWood 2 Drawer Cabinet White Finish\n6.04\n8\n14432.0\nUnited Kingdom\n48.32\n\n\n25364\n579522\n2019-11-30\n23493\nVintage Doily Travel Sewing Kit\n6.04\n10\n14432.0\nUnited Kingdom\n60.40\n\n\n25365\n579522\n2019-11-30\n23240\nSet Of 4 Knick Knack Tins Doily\n6.19\n6\n14432.0\nUnited Kingdom\n37.14\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n536320\n536585\n2018-12-01\n37449\nCeramic Cake Stand + Hanging Cakes\n20.45\n2\n17460.0\nUnited Kingdom\n40.90\n\n\n536321\n536590\n2018-12-01\n22776\nSweetheart 3 Tier Cake Stand\n20.45\n1\n13065.0\nUnited Kingdom\n20.45\n\n\n536322\n536590\n2018-12-01\n22622\nBox Of Vintage Alphabet Blocks\n20.45\n2\n13065.0\nUnited Kingdom\n40.90\n\n\n536323\n536591\n2018-12-01\n37449\nCeramic Cake Stand + Hanging Cakes\n20.45\n1\n14606.0\nUnited Kingdom\n20.45\n\n\n536324\n536597\n2018-12-01\n22220\nCake Stand Lovebird 2 Tier White\n20.45\n1\n18011.0\nUnited Kingdom\n20.45\n\n\n\n\n502753 rows √ó 9 columns"
  },
  {
    "objectID": "posts/online-retail-mba/index.html#geographical-sales-analysis",
    "href": "posts/online-retail-mba/index.html#geographical-sales-analysis",
    "title": "üõí Using Market Basket Analysis to penetrate an untapped regional market",
    "section": "Geographical sales analysis",
    "text": "Geographical sales analysis\nWhen conducting a geographical analysis of sales, it is essential to consider both the average purchase value and sales volume to determine if there are any countries that offer promising opportunities. For instance, a country with a high average purchase value but low sales volume may indicate that it has untapped potential and should be targeted for further penetration. The average purchase value gives an indication of the buying power and willingness of customers to spend money, while sales volume reflects the market demand and potential for growth. A country with a high average purchase value and low sales volume could be a potential opportunity for businesses to capitalize on the untapped market potential by increasing their presence and promoting their products or services more effectively.\nThe analysis of the geographical spread of sales will be carried out at country level, national vs.¬†international level, and finally regional level.\n\nCountry level\n\n\nCode\nbycountry = df.groupby('Country').agg(\n    tot_amount=('Amount', 'sum'),\n    mean_amount=('Amount', 'mean')\n).sort_values('tot_amount', ascending=False)\n\n# display(bycountry.head())\n\nfig, ax = plt.subplots(2, figsize=(15,10))\nax[0].bar(bycountry.index, bycountry['tot_amount'])\nax[1].bar(bycountry.sort_values('mean_amount', ascending=False).index, bycountry.sort_values('mean_amount', ascending=False)['mean_amount'])\nplt.setp(ax, xticks=bycountry.index, xticklabels=bycountry.index)\nplt.setp(ax[0].get_xticklabels(), rotation=90, ha=\"center\")\nplt.setp(ax[1].get_xticklabels(), rotation=90, ha=\"center\")\n\nax[0].set_ylabel(\"Amount (GBP)\")\nax[1].set_ylabel(\"Amount (GBP)\")\nax[0].set_title(\"Countries by total amount sold\")\nax[1].set_title(\"Countries by average amount sold\")\nplt.suptitle(\"Overview on geographical market spread\")\nax[0].grid(axis='y')\nax[1].grid(axis='y')\nplt.subplots_adjust(hspace=0.7)\n\nplt.show()\n\n\n\n\n\n\n\nNational vs.¬†international level\n\n\nCode\n# Creating a column to differentiation between national vs. international sales\ndf['UKvsRoW'] = np.where(df['Country'] == 'United Kingdom', 'UK', 'RoW')\n\nbyukvsrow = df.groupby('UKvsRoW').agg(\n    tot_amount=('Amount', 'sum'),\n    mean_amount=('Amount', 'mean'),\n    n_inv=('TransactionNo', 'nunique'),\n    quantity=('Quantity', 'mean')\n).sort_values('mean_amount', ascending=False)\n\ndisplay(byukvsrow)\n\nplt.pie(byukvsrow['tot_amount'], labels=byukvsrow.index, autopct='%1.1f%%', explode=(0.1,0), shadow=True)\nplt.title('Total revenue by UK vs other countries')\nplt.show()\n\n\n\n\n\n\n\n\n\ntot_amount\nmean_amount\nn_inv\nquantity\n\n\nUKvsRoW\n\n\n\n\n\n\n\n\nRoW\n10258462.78\n211.383944\n1809\n18.478900\n\n\nUK\n50192562.28\n110.502027\n17164\n9.646163\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nrow_rev = df.loc[df['UKvsRoW'] == 'RoW', 'Amount']\nuk_rev = df.loc[df['UKvsRoW'] == 'UK', 'Amount']\n\n# We perform a two-sample ttest to check for statistically significant difference in average sales between national and international markets\nttest_ind(uk_rev, row_rev)\n\n\nTtest_indResult(statistic=-16.7279858606087, pvalue=8.524026769071223e-63)\n\n\n\nEven though the volume of sales of international customers accounts only for the 17.0%, a two-sample ttest demonstrates that the average revenue generated abroad is significantly higher than the one generated in the UK. This means that international markets for this business are potentially more lucrative than the national one and need to be exploited more.\n\n\n\nRegional level\n\n\nCode\n# Mapping regions\nregions = {'Europe': ['Sweden', 'Denmark', 'Norway', 'Finland', 'Iceland', 'Netherlands', 'Belgium', 'France', 'Germany', 'Switzerland', 'Austria',\n                      'Italy', 'Spain', 'Greece', 'Portugal', 'Malta', 'Cyprus', 'Czech Republic', 'Lithuania', 'Poland', 'United Kingdom', 'EIRE',\n                      'Channel Islands', 'European Community'],\n           'North America': ['USA', 'Canada'],\n           'Middle East': ['Bahrain', 'United Arab Emirates', 'Israel', 'Lebanon', 'Saudi Arabia'],\n           'Asia Pacific': ['Japan', 'Australia', 'Singapore', 'Hong Kong'],\n           'RoW': ['Brazil', 'RSA'],\n           'Unspecified': ['Unspecified']}\n\ncountry_to_region = {}\nfor region, countries in regions.items():\n    for country in countries:\n        country_to_region[country] = region\n\ndf['Region'] = df['Country'].map(country_to_region)\n\nbyregion = df.groupby('Region').agg(\n    tot_amount=('Amount', 'sum'),\n    mean_amount=('Amount', 'mean'),\n    n_inv=('TransactionNo', 'nunique'),\n    quantity=('Quantity', 'mean')\n).sort_values('mean_amount', ascending=False)\n\ndisplay(byregion.sort_values('mean_amount', ascending=False))\n\nfig, ax1 = plt.subplots(figsize=(15,5))\nax1 = plt.bar(byregion.index, byregion['mean_amount'])\nplt.title(\"Average purchase value by region\")\nplt.ylabel('Amount (GBP)')\nplt.xlabel('Region')\nplt.grid(axis='y')\nplt.show()\n\n\n\n\n\n\n\n\n\ntot_amount\nmean_amount\nn_inv\nquantity\n\n\nRegion\n\n\n\n\n\n\n\n\nAsia Pacific\n1380079.80\n590.787586\n92\n51.083904\n\n\nNorth America\n59633.28\n154.891636\n11\n13.503896\n\n\nMiddle East\n76798.30\n154.835282\n16\n12.661290\n\n\nEurope\n58892902.53\n118.021612\n18839\n10.308538\n\n\nRoW\n8912.10\n101.273864\n2\n8.000000\n\n\nUnspecified\n32699.05\n73.152237\n13\n6.272931\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nf_value, p_value = f_oneway(\n    df.loc[df['Region'] == 'Asia Pacific', 'Amount'],\n    df.loc[df['Region'] == 'North America', 'Amount'],\n    df.loc[df['Region'] == 'Middle East', 'Amount'],\n    df.loc[df['Region'] == 'Europe', 'Amount'],\n    df.loc[df['Region'] == 'RoW', 'Amount'])\nprint(f'ANOVA F-value: {f_value:.2f}')\nprint(f'ANOVA p-value: {p_value:.4f}')\ntukey_df = df.filter(items=['Amount', 'Region']).dropna()\nprint(pairwise_tukeyhsd(tukey_df['Amount'], tukey_df['Region']))\n\n\nANOVA F-value: 81.58\nANOVA p-value: 0.0000\n          Multiple Comparison of Means - Tukey HSD, FWER=0.05          \n=======================================================================\n    group1        group2     meandiff p-adj    lower     upper   reject\n-----------------------------------------------------------------------\n Asia Pacific        Europe  -472.766    0.0 -547.3921 -398.1398   True\n Asia Pacific   Middle East -435.9523    0.0  -613.855 -258.0496   True\n Asia Pacific North America -435.8959    0.0 -633.8256 -237.9663   True\n Asia Pacific           RoW -489.5137 0.0048 -880.2663  -98.7612   True\n Asia Pacific   Unspecified -517.6353    0.0 -703.4071 -331.8636   True\n       Europe   Middle East   36.8137 0.9872  -124.841  198.4683  False\n       Europe North America     36.87 0.9928 -146.5938  220.3338  False\n       Europe           RoW  -16.7477    1.0 -400.3757  366.8802  False\n       Europe   Unspecified  -44.8694 0.9754 -215.1456  125.4068  False\n  Middle East North America    0.0564    1.0 -244.3599  244.4726  False\n  Middle East           RoW  -53.5614 0.9991 -469.7954  362.6726  False\n  Middle East   Unspecified   -81.683 0.9207 -316.3622  152.9961  False\nNorth America           RoW  -53.6178 0.9992 -478.7971  371.5616  False\nNorth America   Unspecified  -81.7394 0.9386 -331.9414  168.4626  False\n          RoW   Unspecified  -28.1216    1.0 -447.7792   391.536  False\n-----------------------------------------------------------------------\n\n\n\nWe can observe from both the bar plot and the ANOVA analysis that the mean purchase value in the Asia/Pacific region is consistently and significantly higher than the mean purchase value in the other regions. Based on this important information, we can infer that the Asia/Pacific region is a potentially lucrative market with higher average purchase amounts than the other regions. Therefore, the store may want to consider investing more resources in this region to take advantage of this opportunity to increase volume of sales. The business can consider implementing targeted marketing strategies, such as advertising campaigns and promotions, that cater to the preferences and interests of the Asia/Pacific market. Additionally, it can explore expanding its product offerings to meet the specific demands of this region, or enhancing the quality of existing products to meet their higher standards. It may be useful to conduct further research and analysis to gain deeper insights into the preferences and behavior of customers in the Asia/Pacific region, and tailor sales strategies accordingly."
  },
  {
    "objectID": "posts/online-retail-mba/index.html#market-basket-analysis-for-the-asian-market",
    "href": "posts/online-retail-mba/index.html#market-basket-analysis-for-the-asian-market",
    "title": "üõí Using Market Basket Analysis to penetrate an untapped regional market",
    "section": "Market basket analysis for the Asian market",
    "text": "Market basket analysis for the Asian market\nMarket basket analysis, specifically Apriori and association rules, can provide valuable insights into customer behavior and preferences that can be used to develop effective marketing strategies. By analyzing customer purchase patterns and identifying which products are commonly purchased together, businesses can create product bundles and promotions that cater to specific customer segments. For instance, if the analysis reveals that customers who purchase Product A are highly likely to also purchase Product B, the business can create a bundle that includes both products at a discounted price to increase sales.\nThe Asia/Pacific region has a consistently higher average purchase value than other regions, indicating a potential opportunity to increase sales and revenue in that particular market. By conducting basket analysis on this region, the business can gain further insights into the specific product preferences and purchasing habits of customers in this market. This information can then be used to create targeted marketing strategies, such as promotions and advertising campaigns, that appeal to the unique needs and interests of customers in the Asia/Pacific region.\nFirst, we subset the dataframe to filter for the transactions happened in the Asian market and encode them in binary features (one-hot encoding). Then, with the Apriori algorithm, we group them together according to a minimum support of 0.05 and we filter them according to a minimum confidence level of 1.\nThe result is a dataframe containing frequently sold itemsets with a set a metrics for market basket analysis. These MBA metrics are commonly used in association rule mining, a data mining technique used to identify relationships and patterns among items in a dataset. Here‚Äôs a brief explanation of each metric:\n\nAntecedent support: This refers to the proportion of transactions that contain the antecedent (or the ‚Äúif‚Äù part of a rule). It is calculated as the number of transactions containing the antecedent divided by the total number of transactions.\nConsequent support: This refers to the proportion of transactions that contain the consequent (or the ‚Äúthen‚Äù part of a rule). It is calculated as the number of transactions containing the consequent divided by the total number of transactions.\nSupport: This refers to the proportion of transactions that contain both the antecedent and the consequent. It is calculated as the number of transactions containing both the antecedent and the consequent divided by the total number of transactions.\nConfidence: This measures the strength of the association between the antecedent and the consequent. It is calculated as the support of the antecedent and consequent divided by the support of the antecedent. Confidence can range from 0 to 1, with higher values indicating stronger associations.\nLift: This measures the degree to which the presence of the antecedent affects the likelihood of the consequent. It is calculated as the support of the antecedent and consequent divided by the product of the support of the antecedent and the support of the consequent. A lift value greater than 1 indicates a positive association between the antecedent and consequent, while a value less than 1 indicates a negative association.\nLeverage: This measures the difference between the observed frequency of the antecedent and consequent co-occurring and the frequency expected if they were independent. It is calculated as the support of the antecedent and consequent minus the product of the support of the antecedent and the support of the consequent. A positive leverage value indicates a positive association between the antecedent and consequent, while a negative value indicates a negative association.\nConviction: This measures the degree of implication of the rule. It is calculated as the ratio of the support of the antecedent to the complement of the confidence. Conviction can range from 0 to infinity, with higher values indicating stronger implications.\n\n\n\nCode\n# Subsetting for Asia/Pacific transactions\nasian_market = df[df['Region'] == 'Asia Pacific']\n\n# Converting transactions in a list of lists\ntransactions = asian_market.groupby('TransactionNo').apply(lambda x: list(x['ProductName'])).to_list()\nencoder = TransactionEncoder().fit(transactions)\nonehot = encoder.transform(transactions)\nonehot = pd.DataFrame(onehot, columns=encoder.columns_)\n\n# Selecting frequent itemsets with apriori algorythm\nfrequent_itemsets = apriori(onehot,\n                            min_support = 0.05, \n                            max_len = 5, \n                            use_colnames = True)\n\nprint('Number of itemsets selected by the Apriori algorithm:', len(frequent_itemsets))\n\n# Computing association rules for the frequent itemsets, and filtering by confidence == 1\nrules = association_rules(frequent_itemsets, metric='confidence', min_threshold=1)\n\n# Adding number of items in the itemsets\nrules['n_antecedents'] = rules['antecedents'].apply(lambda x: len(x))\nrules['n_consequents'] = rules['consequents'].apply(lambda x: len(x))\nrules.sample(15, random_state=42)\n\n\nNumber of itemsets selected by the Apriori algorithm: 163\n\n\n\n\n\n\n\n\n\nantecedents\nconsequents\nantecedent support\nconsequent support\nsupport\nconfidence\nlift\nleverage\nconviction\nn_antecedents\nn_consequents\n\n\n\n\n37\n(Roses Regency Teacup And Saucer, Regency Cake...\n(Spaceboy Lunch Box)\n0.054348\n0.108696\n0.054348\n1.0\n9.200000\n0.048440\ninf\n3\n1\n\n\n24\n(Spaceboy Lunch Box, Roses Regency Teacup And ...\n(Dolly Girl Lunch Box)\n0.054348\n0.097826\n0.054348\n1.0\n10.222222\n0.049031\ninf\n2\n1\n\n\n25\n(Roses Regency Teacup And Saucer, Dolly Girl L...\n(Spaceboy Lunch Box)\n0.054348\n0.108696\n0.054348\n1.0\n9.200000\n0.048440\ninf\n2\n1\n\n\n36\n(Spaceboy Lunch Box, Roses Regency Teacup And ...\n(Regency Cakestand 3 Tier)\n0.054348\n0.086957\n0.054348\n1.0\n11.500000\n0.049622\ninf\n3\n1\n\n\n34\n(Spaceboy Lunch Box, Regency Cakestand 3 Tier,...\n(Roses Regency Teacup And Saucer)\n0.054348\n0.097826\n0.054348\n1.0\n10.222222\n0.049031\ninf\n3\n1\n\n\n39\n(Spaceboy Lunch Box, Roses Regency Teacup And ...\n(Regency Cakestand 3 Tier, Dolly Girl Lunch Box)\n0.054348\n0.054348\n0.054348\n1.0\n18.400000\n0.051394\ninf\n2\n2\n\n\n4\n(Blue Polkadot Bowl)\n(Pink Polkadot Bowl)\n0.054348\n0.054348\n0.054348\n1.0\n18.400000\n0.051394\ninf\n1\n1\n\n\n12\n(Set Of 6 Snack Loaf Baking Cases)\n(Set Of 6 Tea Time Baking Cases)\n0.054348\n0.054348\n0.054348\n1.0\n18.400000\n0.051394\ninf\n1\n1\n\n\n8\n(Feltcraft Princess Lola Doll)\n(Feltcraft Princess Olivia Doll)\n0.054348\n0.076087\n0.054348\n1.0\n13.142857\n0.050213\ninf\n1\n1\n\n\n3\n(Blue Happy Birthday Bunting)\n(Pink Happy Birthday Bunting)\n0.054348\n0.076087\n0.054348\n1.0\n13.142857\n0.050213\ninf\n1\n1\n\n\n6\n(Dolly Girl Lunch Box)\n(Spaceboy Lunch Box)\n0.097826\n0.108696\n0.097826\n1.0\n9.200000\n0.087193\ninf\n1\n1\n\n\n27\n(Set 3 Retrospot Tea/Coffee/Sugar, Lunch Bag D...\n(Red Spotty Biscuit Tin)\n0.054348\n0.076087\n0.054348\n1.0\n13.142857\n0.050213\ninf\n2\n1\n\n\n31\n(Spaceboy Lunch Box, Regency Cakestand 3 Tier)\n(Roses Regency Teacup And Saucer)\n0.054348\n0.097826\n0.054348\n1.0\n10.222222\n0.049031\ninf\n2\n1\n\n\n19\n(Roses Regency Teacup And Saucer, Regency Cake...\n(Dolly Girl Lunch Box)\n0.054348\n0.097826\n0.054348\n1.0\n10.222222\n0.049031\ninf\n2\n1\n\n\n17\n(Dolly Girl Lunch Box, Lunch Bag Dolly Girl De...\n(Spaceboy Lunch Box)\n0.065217\n0.108696\n0.065217\n1.0\n9.200000\n0.058129\ninf\n2\n1\n\n\n\n\n\n\n\n\nUpon examining the frequent itemsets, it becomes evident that most of them consist of identical items that are often purchased together, with only minor variations such as color or pattern. For instance, transactions may include items like Blue Polkadot Bowls and Pink Polkadot Bowls, Dolly Girl Lunch Boxes and Spaceboy Lunch Boxes, or Feltcraft Princess Lola Dolls and Feltcraft Princess Olivia Dolls.\n\n\nBundle offers\nBased on the observation that these items are frequently bought together, it could be advantageous to offer them as bundles to customers. The firm could offer convenience and value to customers while potentially increasing sales and revenue. For example, a bundle might include both the Blue Polkadot Bowl and the Pink Polkadot Bowl, or the Dolly Girl Lunch Box and the Spaceboy Lunch Box. This strategy can be an effective way to meet Asian customers needs while boosting profits for the retailer.\n\n\nCode\n# Since we want to create bundle offers for single products, we filter for single items\nrules = rules[(rules['n_antecedents'] == 1) & (rules['n_consequents'] == 1)]\ndisplay(rules.sort_values('support', ascending=False))\n\nrules['antecedent'] = rules['antecedents'].apply(lambda x: list(x)[0])\nrules['consequent'] = rules['consequents'].apply(lambda x: list(x)[0])\nrules['rule'] = rules.index\n\ncoords = rules[['antecedent', 'consequent', 'rule']]\n\nparallel_coordinates(coords, 'rule', colormap='ocean')\nplt.title('Bundle offers for the Asian / Pacific market')\nplt.show()\n\n\n\n\n\n\n\n\n\nantecedents\nconsequents\nantecedent support\nconsequent support\nsupport\nconfidence\nlift\nleverage\nconviction\nn_antecedents\nn_consequents\n\n\n\n\n6\n(Dolly Girl Lunch Box)\n(Spaceboy Lunch Box)\n0.097826\n0.108696\n0.097826\n1.0\n9.200000\n0.087193\ninf\n1\n1\n\n\n0\n(Alarm Clock Bakelike Red)\n(Alarm Clock Bakelike Green)\n0.065217\n0.065217\n0.065217\n1.0\n15.333333\n0.060964\ninf\n1\n1\n\n\n1\n(Alarm Clock Bakelike Green)\n(Alarm Clock Bakelike Red)\n0.065217\n0.065217\n0.065217\n1.0\n15.333333\n0.060964\ninf\n1\n1\n\n\n2\n(Basket Of Toadstools)\n(Set 3 Retrospot Tea/Coffee/Sugar)\n0.054348\n0.076087\n0.054348\n1.0\n13.142857\n0.050213\ninf\n1\n1\n\n\n3\n(Blue Happy Birthday Bunting)\n(Pink Happy Birthday Bunting)\n0.054348\n0.076087\n0.054348\n1.0\n13.142857\n0.050213\ninf\n1\n1\n\n\n4\n(Blue Polkadot Bowl)\n(Pink Polkadot Bowl)\n0.054348\n0.054348\n0.054348\n1.0\n18.400000\n0.051394\ninf\n1\n1\n\n\n5\n(Pink Polkadot Bowl)\n(Blue Polkadot Bowl)\n0.054348\n0.054348\n0.054348\n1.0\n18.400000\n0.051394\ninf\n1\n1\n\n\n7\n(Fairy Tale Cottage Night Light)\n(Red Toadstool Led Night Light)\n0.054348\n0.119565\n0.054348\n1.0\n8.363636\n0.047850\ninf\n1\n1\n\n\n8\n(Feltcraft Princess Lola Doll)\n(Feltcraft Princess Olivia Doll)\n0.054348\n0.076087\n0.054348\n1.0\n13.142857\n0.050213\ninf\n1\n1\n\n\n9\n(Green Regency Teacup And Saucer)\n(Roses Regency Teacup And Saucer)\n0.054348\n0.097826\n0.054348\n1.0\n10.222222\n0.049031\ninf\n1\n1\n\n\n10\n(Set Of 4 Knick Knack Tins Leaf)\n(Set Of 4 Knick Knack Tins Doily)\n0.054348\n0.076087\n0.054348\n1.0\n13.142857\n0.050213\ninf\n1\n1\n\n\n11\n(Set Of 6 Tea Time Baking Cases)\n(Set Of 6 Snack Loaf Baking Cases)\n0.054348\n0.054348\n0.054348\n1.0\n18.400000\n0.051394\ninf\n1\n1\n\n\n12\n(Set Of 6 Snack Loaf Baking Cases)\n(Set Of 6 Tea Time Baking Cases)\n0.054348\n0.054348\n0.054348\n1.0\n18.400000\n0.051394\ninf\n1\n1\n\n\n\n\n\n\n\n\n\n\n\nThe parallel coordinates plot visually highlights the bundles that were put together for the Asian market, and that the firm should offer on their e-commerce.\n\nOffering bundles of products that are already sold together as frequent itemsets can be an effective marketing strategy for several reasons:\n\nConvenience: Bundling products that are frequently purchased together can provide customers with a convenient and streamlined shopping experience. Instead of having to search for each product individually, customers can purchase them together in a single transaction.\nValue proposition: Bundling products can create a compelling value proposition for customers. By offering a discount or special deal on a bundle of products, customers may be more likely to make a purchase than if they were buying each item individually.\nIncreased sales: Bundling can also lead to increased sales by encouraging customers to purchase additional products that they may not have otherwise considered. For example, a customer who only intended to buy coffee may be enticed to buy a bundle that includes coffee, a mug, and a bag of coffee beans.\nUpselling opportunities: Bundling can also provide opportunities for upselling by encouraging customers to purchase a higher-value bundle that includes additional products or features.\n\nIn summary, while some products may already be sold together as frequent itemsets, bundling can provide additional value and convenience for customers, as well as opportunities for increased sales and upselling. By offering bundles, businesses can differentiate themselves from competitors and create a more compelling value proposition for their customers."
  },
  {
    "objectID": "posts/titanic/index.html",
    "href": "posts/titanic/index.html",
    "title": "üö¢ Understanding Survival on the Titanic",
    "section": "",
    "text": "Using a machine learning model to predict the probability of a passenger‚Äôs survival on the Titanic, a Persona has been defined to characterize those who survived."
  },
  {
    "objectID": "posts/titanic/index.html#key-findings-and-achievements",
    "href": "posts/titanic/index.html#key-findings-and-achievements",
    "title": "üö¢ Understanding Survival on the Titanic",
    "section": "",
    "text": "Using a machine learning model to predict the probability of a passenger‚Äôs survival on the Titanic, a Persona has been defined to characterize those who survived."
  },
  {
    "objectID": "posts/titanic/index.html#introduction",
    "href": "posts/titanic/index.html#introduction",
    "title": "üö¢ Understanding Survival on the Titanic",
    "section": "Introduction",
    "text": "Introduction\nThe Titanic disaster remains one of the most infamous shipwrecks in history, with over 1500 lives lost. In this notebook, we will explore and analyze a dataset containing information on passengers who were aboard the ship and build a machine learning model to predict which passengers were likely to have survived the tragedy.\n\n\nCode\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.impute import KNNImputer\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict, GridSearchCV, KFold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, roc_auc_score, confusion_matrix, ConfusionMatrixDisplay, classification_report\nimport shap"
  },
  {
    "objectID": "posts/titanic/index.html#data",
    "href": "posts/titanic/index.html#data",
    "title": "üö¢ Understanding Survival on the Titanic",
    "section": "Data",
    "text": "Data\nThe variables included in the dataset are:\n\nPassengerId: An integer value representing the unique ID of each passenger on board.\nSurvived: A binary variable indicating whether the passenger survived the sinking of the Titanic or not, with ‚ÄúTrue‚Äù indicating survival and ‚ÄúFalse‚Äù indicating death.\nPclass: An integer variable representing the class of the passenger‚Äôs ticket, with values 1, 2, or 3 (1 being the highest class).\nName: A string variable representing the name of the passenger.\nSex: A string variable representing the gender of the passenger.\nAge: A float variable representing the age of the passenger in years.\nSibSp: An integer variable representing the number of siblings or spouses the passenger had on board.\nParch: An integer variable representing the number of parents or children the passenger had on board.\nTicket: A string variable representing the ticket number of the passenger.\nFare: A float variable representing the fare paid by the passenger for their ticket.\nCabin: A string variable representing the cabin number of the passenger, if applicable.\nEmbarked: A string variable representing the port of embarkation for the passenger, with possible values ‚ÄúS‚Äù (Southampton), ‚ÄúC‚Äù (Cherbourg), or ‚ÄúQ‚Äù (Queenstown).\n\nHere below a glimpse of the dataset:\n\n\nCode\ndf = pd.read_csv('../../data/titanic.csv')\ndf\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n887\n0\n2\nMontvila, Rev. Juozas\nmale\n27.0\n0\n0\n211536\n13.0000\nNaN\nS\n\n\n887\n888\n1\n1\nGraham, Miss. Margaret Edith\nfemale\n19.0\n0\n0\n112053\n30.0000\nB42\nS\n\n\n888\n889\n0\n3\nJohnston, Miss. Catherine Helen \"Carrie\"\nfemale\nNaN\n1\n2\nW./C. 6607\n23.4500\nNaN\nS\n\n\n889\n890\n1\n1\nBehr, Mr. Karl Howell\nmale\n26.0\n0\n0\n111369\n30.0000\nC148\nC\n\n\n890\n891\n0\n3\nDooley, Mr. Patrick\nmale\n32.0\n0\n0\n370376\n7.7500\nNaN\nQ\n\n\n\n\n891 rows √ó 12 columns\n\n\n\n\nTransformations, feature engineering, preprocessing\nIn this first section we are going to explore and process the given dataset and prepare it for modeling. Let‚Äôs first take a general look at the variables from a structural point-of-view.\n\n\nCode\ndf.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n\n\nPassengerId column is a useless variable in terms of prediction capabilities. We can set it as dataframe index (or drop it) to keep it out of scope.\n\ndf = df.set_index('PassengerId')\n# df = df.drop(columns=['PassengerId'])\n\nTo give more weight to first class (and vice-versa) Pclass values must be inverted.\n\nconditions = [df['Pclass'] == 1, df['Pclass'] == 3]\nchoices = [3, 1]\ndf['Pclass'] = np.select(conditions, choices, 2)\n\nLet‚Äôs assess now the presence of null values. Percentage of null values per variable:\n\n\nCode\ndisplay((df.isnull().sum() / df.shape[0]).round(3).sort_values(ascending=False))\n\n\nCabin       0.771\nAge         0.199\nEmbarked    0.002\nSurvived    0.000\nPclass      0.000\nName        0.000\nSex         0.000\nSibSp       0.000\nParch       0.000\nTicket      0.000\nFare        0.000\ndtype: float64\n\n\nA part from a negligeable presence of null values in the Embarked variable, we can see that important columns such as Cabin and Age are full of empty observations. Before proceeding with the model development, we‚Äôll have to deal with these inconsistencies.\n\n\nCode\ndf['Cabin'].unique()\n\n\narray([nan, 'C85', 'C123', 'E46', 'G6', 'C103', 'D56', 'A6',\n       'C23 C25 C27', 'B78', 'D33', 'B30', 'C52', 'B28', 'C83', 'F33',\n       'F G73', 'E31', 'A5', 'D10 D12', 'D26', 'C110', 'B58 B60', 'E101',\n       'F E69', 'D47', 'B86', 'F2', 'C2', 'E33', 'B19', 'A7', 'C49', 'F4',\n       'A32', 'B4', 'B80', 'A31', 'D36', 'D15', 'C93', 'C78', 'D35',\n       'C87', 'B77', 'E67', 'B94', 'C125', 'C99', 'C118', 'D7', 'A19',\n       'B49', 'D', 'C22 C26', 'C106', 'C65', 'E36', 'C54',\n       'B57 B59 B63 B66', 'C7', 'E34', 'C32', 'B18', 'C124', 'C91', 'E40',\n       'T', 'C128', 'D37', 'B35', 'E50', 'C82', 'B96 B98', 'E10', 'E44',\n       'A34', 'C104', 'C111', 'C92', 'E38', 'D21', 'E12', 'E63', 'A14',\n       'B37', 'C30', 'D20', 'B79', 'E25', 'D46', 'B73', 'C95', 'B38',\n       'B39', 'B22', 'C86', 'C70', 'A16', 'C101', 'C68', 'A10', 'E68',\n       'B41', 'A20', 'D19', 'D50', 'D9', 'A23', 'B50', 'A26', 'D48',\n       'E58', 'C126', 'B71', 'B51 B53 B55', 'D49', 'B5', 'B20', 'F G63',\n       'C62 C64', 'E24', 'C90', 'C45', 'E8', 'B101', 'D45', 'C46', 'D30',\n       'E121', 'D11', 'E77', 'F38', 'B3', 'D6', 'B82 B84', 'D17', 'A36',\n       'B102', 'B69', 'E49', 'C47', 'D28', 'E17', 'A24', 'C50', 'B42',\n       'C148'], dtype=object)\n\n\n\n\nCode\ndisplay(df['Cabin'].value_counts().head(30))\n\n\nCabin\nB96 B98            4\nG6                 4\nC23 C25 C27        4\nC22 C26            3\nF33                3\nF2                 3\nE101               3\nD                  3\nC78                2\nC93                2\nE8                 2\nD36                2\nB77                2\nC123               2\nE121               2\nE44                2\nD35                2\nC125               2\nE67                2\nB35                2\nB18                2\nE24                2\nB49                2\nC65                2\nB20                2\nB5                 2\nB57 B59 B63 B66    2\nC126               2\nB51 B53 B55        2\nF4                 2\nName: count, dtype: int64\n\n\nWe can see that the majority of the cabins in the dataset seem to follow a pattern of a letter followed by a two or three digit number, suggesting that the letter represents the section or deck where the cabin is situated and the number represents the room number. It is reasonable to assume that knowing the section where a passenger‚Äôs cabin is located would provide valuable information about their likelihood of survival. Therefore, it would be beneficial to clean up the column containing cabin information to extract useful insights.\n\ntrans_df = df.copy()\n\n# Splitting Cabin variable into Deck and Room variables\ntrans_df['CabinData'] = trans_df['Cabin'].isnull().apply(lambda x: not x)\ntrans_df['Deck'] = trans_df['Cabin'].str.slice(0,1)\ntrans_df['Room'] = trans_df['Cabin'].str.slice(1,5).str.extract(\"([0-9]+)\", expand=False).astype(\"float\")\n\ntrans_df[['Survived', 'CabinData']] = trans_df[['Survived', 'CabinData']].astype(int)\n\n# Label-encoding target variable\ntrans_df['Female'] = np.where(trans_df['Sex'] == 'female', 1, 0)\n\n# Drop useless variables for modeling\ntrans_df = trans_df.drop(columns=['Name', 'Ticket', 'Cabin', 'Sex', 'Room'])\n\n# Create one-hot encoding of the categorical variable\ndf_encoded = pd.get_dummies(trans_df, columns=['Deck', 'Embarked'])\n\n# Impute missing values with KNN imputer\nimputer = KNNImputer(n_neighbors=8)\nimputed_df = imputer.fit_transform(df_encoded)\nimputed_df = pd.DataFrame(imputed_df, columns=df_encoded.columns)\n\nimputed_df\n\n\n\n\n\n\n\n\nSurvived\nPclass\nAge\nSibSp\nParch\nFare\nCabinData\nFemale\nDeck_A\nDeck_B\nDeck_C\nDeck_D\nDeck_E\nDeck_F\nDeck_G\nDeck_T\nEmbarked_C\nEmbarked_Q\nEmbarked_S\n\n\n\n\n0\n0.0\n1.0\n22.00\n1.0\n0.0\n7.2500\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n1\n1.0\n3.0\n38.00\n1.0\n0.0\n71.2833\n1.0\n1.0\n0.0\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n\n\n2\n1.0\n1.0\n26.00\n0.0\n0.0\n7.9250\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n3\n1.0\n3.0\n35.00\n1.0\n0.0\n53.1000\n1.0\n1.0\n0.0\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n4\n0.0\n1.0\n35.00\n0.0\n0.0\n8.0500\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n0.0\n2.0\n27.00\n0.0\n0.0\n13.0000\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n887\n1.0\n3.0\n19.00\n0.0\n0.0\n30.0000\n1.0\n1.0\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n888\n0.0\n1.0\n23.75\n1.0\n2.0\n23.4500\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n889\n1.0\n3.0\n26.00\n0.0\n0.0\n30.0000\n1.0\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n\n\n890\n0.0\n1.0\n32.00\n0.0\n0.0\n7.7500\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n\n\n\n\n891 rows √ó 19 columns"
  },
  {
    "objectID": "posts/titanic/index.html#exploratory-analysis",
    "href": "posts/titanic/index.html#exploratory-analysis",
    "title": "üö¢ Understanding Survival on the Titanic",
    "section": "Exploratory analysis",
    "text": "Exploratory analysis\nWe have transformed our dataframe by imputing missing values with a KNNImputer algorythm and one-hot encoded categorical variables. Let‚Äôs now perform an exploratory analysis to look for potential correlations between our target variable and the others.\n\n\nCode\nax = sns.countplot(x=\"Pclass\", data=imputed_df, hue='Survived', palette=['red', 'green'])\nax.set(xlabel='')\n\nfor p in ax.patches:\n    count = p.get_height()\n    percentage = '{:.1f}%'.format(100 * count / len(imputed_df))\n    x = p.get_x() + p.get_width() / 2\n    y = p.get_y() + p.get_height()\n    ax.annotate(f'{count}\\n{percentage}', (x, y), ha='center', va='center')\n    \nplt.xticks([0, 1, 2], ['Third class', 'Second class', 'First class'])\nplt.title(\"Perished / Survived per `Pclass`\")\nplt.ylabel(\"Count\")\nplt.show()\n\n\n\n\n\n42% of perished people is coming from the third class.\n\n\nCode\nax = sns.countplot(x=\"Female\", data=imputed_df, hue='Survived', palette=['red', 'green'])\nax.set(xlabel='')\n\nfor p in ax.patches:\n    count = p.get_height()\n    percentage = '{:.1f}%'.format(100 * count / len(imputed_df))\n    x = p.get_x() + p.get_width() / 2\n    y = p.get_y() + p.get_height()\n    ax.annotate(f'{count}\\n{percentage}', (x, y), ha='center', va='center')\n    \nplt.xticks([0, 1], ['Men', 'Women'])\nplt.title(\"Perished / Survived per sex\")\nplt.ylabel(\"Count\")\nplt.show()\n\n\n\n\n\nThe majority of perished people are men, while the majority of survived are women.\n\n\nCode\ncatplot = sns.catplot(data=imputed_df, y=\"Age\", x=\"Pclass\", hue='Survived', col='Female', alpha=0.5, palette=['red', 'green'])\ncatplot.set(xlabel='')\nplt.xticks([0, 1, 2], ['Third class', 'Second class', 'First class'])\ncatplot.fig.suptitle('Distribution of \"Survival\" per `Age` and `Pclass`', y=1.05)\nplt.show()\n\ncatplot = sns.catplot(data=imputed_df, y=\"Fare\", x=\"Pclass\", hue='Survived', col='Female', alpha=0.5, palette=['red', 'green'])\ncatplot.set(xlabel='')\nplt.xticks([0, 1, 2], ['Third class', 'Second class', 'First class'])\ncatplot.fig.suptitle('Distribution of \"Survival\" per `Fare` and `Pclass`', y=1.05)\nplt.show()\n\n\n\n\n\n\n\n\nAlready from these exploratory visualizations, we can easily see that the majority of survived people are women and people from the top classes. Will this be confirmed by the model?\n\n\nCode\nsurvived_corr = imputed_df.corr()['Survived'].sort_values(ascending=False)[1:]\ndisplay(survived_corr)\n\n\nFemale        0.543351\nPclass        0.338481\nCabinData     0.316912\nFare          0.257307\nDeck_B        0.175095\nEmbarked_C    0.168240\nDeck_D        0.150716\nDeck_E        0.145321\nDeck_C        0.114652\nParch         0.081629\nDeck_F        0.057935\nDeck_A        0.022287\nDeck_G        0.016040\nEmbarked_Q    0.003650\nDeck_T       -0.026456\nSibSp        -0.035322\nAge          -0.092717\nEmbarked_S   -0.155660\nName: Survived, dtype: float64\n\n\n\n\nCode\nfor i in range(0, len(survived_corr.index), 6):\n    chunk = survived_corr.index[i:i+6]\n    sns.pairplot(imputed_df, y_vars=['Survived'], x_vars=chunk, kind='reg')"
  },
  {
    "objectID": "posts/titanic/index.html#model-development",
    "href": "posts/titanic/index.html#model-development",
    "title": "üö¢ Understanding Survival on the Titanic",
    "section": "Model development",
    "text": "Model development\nWe begin by splitting the dataset into train and test sets and instantiate a KFold object for cross validation to avoid overfitting. Several trial and errors suggested to set the test size to 0.4, giving the best balance between cross validation score and test set accuracy score for the models.\n\n# Split the data into training and test sets\nmodel_df = imputed_df.drop(columns=['CabinData'])\nX = model_df.drop(columns=['Survived'])\ny = model_df['Survived']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, stratify=y, random_state=42)\n\n# instantiate a KFold object for cross validation\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\n\n\nModel selection\nThen we compare three classifiers and choose the best one in terms of accuracy.\n\n# Define sklearn pipelines for classifier comparison\n\nlogistic_pipeline = Pipeline([\n#     ('scaler', StandardScaler()),\n    ('logistic', LogisticRegression(max_iter=1000))\n])\n\nrf_pipeline = Pipeline([\n#     ('scaler', StandardScaler()),\n    ('rf', RandomForestClassifier(random_state=42))\n])\n\nsvm_pipeline = Pipeline([\n#     ('scaler', StandardScaler()),\n    ('svm', SVC())\n])\n\npipelines = [logistic_pipeline, rf_pipeline, svm_pipeline]\nfor pipeline in pipelines:\n    scores = cross_val_score(pipeline, X_train, y_train, cv=kf)\n    print(f\"Pipeline: {pipeline.named_steps.keys()} Mean Cross-Validation Score: {scores.mean().round(3)}\")\n    \n    pipeline.fit(X_train, y_train)\n    y_pred = pipeline.predict(X_test)\n    print(f\"Test accuracy score: {round(accuracy_score(y_pred, y_test), 3)}\")\n    \n    # Calculate the confusion matrix\n    cm = confusion_matrix(y_test, y_pred)\n    cmd = ConfusionMatrixDisplay(cm)\n    fig, ax = plt.subplots()\n    cmd.plot(ax=ax, cmap=plt.cm.Blues)\n    ax.set_title(f\"Confusion Matrix\\n{pipeline[0]}\")\n    plt.show()\n\nPipeline: dict_keys(['logistic']) Mean Cross-Validation Score: 0.792\nTest accuracy score: 0.821\nPipeline: dict_keys(['rf']) Mean Cross-Validation Score: 0.8\nTest accuracy score: 0.798\nPipeline: dict_keys(['svm']) Mean Cross-Validation Score: 0.695\nTest accuracy score: 0.65\n\n\n\n\n\n\n\n\n\n\n\nAs we can see, the classification model with the highest accuracy score (mean cross-validation score) is the Random Forest Classifier. We are going to use this specific model to predict survival on the Titanic.\n\n\nPrediction with Random Forest Classifier\nAfter having chosen the right classifier for the job, we train it on the train set with GridSearchCV, that performs an exhaustive search over a specified hyperparameter space for an estimator. It takes as input an estimator, a dictionary of hyperparameters, and a cross-validation strategy. It then fits the estimator on all possible combinations of hyperparameters and evaluates the performance of each combination using cross-validation.\nThe GridSearchCV class is useful for finding the best hyperparameters for a machine learning model. By testing all possible combinations of hyperparameters, it can help to identify the combination that results in the best performance on a given dataset.\n\nparam_grid = {\n    'rf__n_estimators': [10, 50, 100],\n    'rf__max_depth': [None, 5, 10],\n    'rf__min_samples_split': [2, 5, 10],\n    'rf__min_samples_leaf': [1, 2, 4]\n}\n\ngrid_search = GridSearchCV(estimator=rf_pipeline, param_grid=param_grid, cv=kf)\ngrid_search.fit(X_train, y_train)\n\nprint(\"Best parameters:\", grid_search.best_params_)\nprint(\"Best score:\", grid_search.best_score_)\n\ny_pred = grid_search.predict(X_test)\nprint(\"Test set accuracy:\", grid_search.score(X_test, y_test))\n\nestimator = grid_search.best_estimator_.named_steps['rf']\n\n # Calculate the confusion matrix\ncm = confusion_matrix(y_test, y_pred)\ncmd = ConfusionMatrixDisplay(cm)\nfig, ax = plt.subplots()\ncmd.plot(ax=ax, cmap=plt.cm.Blues)\nax.set_title(f\"Confusion Matrix\\n{estimator}\")\nplt.show()\n\nBest parameters: {'rf__max_depth': None, 'rf__min_samples_leaf': 2, 'rf__min_samples_split': 2, 'rf__n_estimators': 50}\nBest score: 0.8294657026979368\nTest set accuracy: 0.8207282913165266\n\n\n\n\n\nWe have taken the best performing algorithm and trained it on our dataset with a GridSearchCV and KFold cross validation. The perfomance on the test set suggests that the chosen classification model is able to predict Survival with an 82% of accuracy. As a final step, we are going to explain the variables which have been taken into consideration by the classifier in the prediction, and draw conclusions on the ‚ÄúSurvived Persona‚Äù.\n\nshap_values = shap.TreeExplainer(estimator).shap_values(X_test)\nshap.summary_plot(shap_values[1], X_test)\n\nNo data for colormapping provided via 'c'. Parameters 'vmin', 'vmax' will be ignored\n\n\n\n\n\nThe SHAP (SHapley Additive exPlanations) summary plot is a powerful tool for interpreting the output of a tree-based model, such as a Random Forest Classifier, using a TreeExplainer. The plot displays the features in order of their importance, as measured by their mean absolute SHAP values. Here‚Äôs how to interpret the SHAP summary plot for a TreeExplainer:\n\nFeature importance: The features are listed along the y-axis of the plot, with the most important features at the top. The importance of each feature is represented by its mean absolute SHAP value, which is indicated by the horizontal bars.\nImpact on prediction: The color of the bars represents the direction and magnitude of the feature‚Äôs impact on the model‚Äôs prediction. Red bars indicate a positive impact on the prediction, while blue bars indicate a negative impact. The length of the bar represents the magnitude of the impact, with longer bars indicating a greater impact.\nRelationship between feature and prediction: The position of each bar relative to the center line indicates the direction and strength of the relationship between the feature and the prediction. Features that push the prediction towards the top of the plot are associated with higher predicted probabilities, while features that push the prediction towards the bottom are associated with lower predicted probabilities.\nInteractions between features: The spacing between the bars for each feature represents the degree of interaction between that feature and other features in the model. If the bars for two features are close together, it indicates that those features tend to interact with each other in the model."
  },
  {
    "objectID": "posts/titanic/index.html#conclusion",
    "href": "posts/titanic/index.html#conclusion",
    "title": "üö¢ Understanding Survival on the Titanic",
    "section": "Conclusion",
    "text": "Conclusion\nThe Random Forest Classifier trained on our dataset was capable of predicting Survival on the Titanic with a 82% of accuracy. The best predictors identified by the SHAP Tree Explainer are:\n\nFemale: whether the person was female or not. The red dots (representing female persons) are all gathered on the right side of the plot, meaning that they have a strong positive impact on survival.\nPclass: passenger class. 1st class passengers (red dots) are located in the right size of the graph. Being a 1st class passenger would have meant sure survival.\nAge: older persons, represented by red dots are all gathered in the left (death) side of the plot, inversely, younger people were more prone to be saved.\nFare: similar situation for fare. Higher fares (red dots) are all located in the right side, meaning that people who paid for more expensive tickets had better chances to survive.\n\nAn interesting insights that SHAP gives us is regarding the Embarked_S. This dummy variable tells us if the passenger was embarked in Southampton. We can see that these passengers (red dots) had practically no chance of being saved. Maybe because they were all 3rd class?\nTo conclude, we can say that the Survived Persona was a young girl, coming from the top classes (having paid a higher fare) and not embarked in Southampton."
  },
  {
    "objectID": "posts/motogp-performance/index.html",
    "href": "posts/motogp-performance/index.html",
    "title": "üèçÔ∏è Modelling Riders Performance",
    "section": "",
    "text": "For the purpose of providing more technical insights to fans, we demonstrate how public race data can be used to extract important information on race and rider performance.\nWe demonstrate how to quantify the performances of riders, teams, and constructors through quantitative indicators that take into account relative speed and consistency, the two fundamental variables in a theoretical definition of race performance."
  },
  {
    "objectID": "posts/motogp-performance/index.html#key-findings-and-achievements",
    "href": "posts/motogp-performance/index.html#key-findings-and-achievements",
    "title": "üèçÔ∏è Modelling Riders Performance",
    "section": "",
    "text": "For the purpose of providing more technical insights to fans, we demonstrate how public race data can be used to extract important information on race and rider performance.\nWe demonstrate how to quantify the performances of riders, teams, and constructors through quantitative indicators that take into account relative speed and consistency, the two fundamental variables in a theoretical definition of race performance."
  },
  {
    "objectID": "posts/motogp-performance/index.html#introduction",
    "href": "posts/motogp-performance/index.html#introduction",
    "title": "üèçÔ∏è Modelling Riders Performance",
    "section": "Introduction",
    "text": "Introduction\nSports are being radically transformed by data collection and analysis, benefiting both professionals and fans. Soccer, baseball, and American football are some examples where player performance data is utilized to acquire talent and provide in-depth statistics for the public. In contrast, data analysis for motorsports fans is not yet widespread, despite being fundamental to the sport‚Äôs operation.\nIn this notebook, we will explore the realm of MotoGP racing and analyze publicly available race data with the aim of comprehending how it can be used to provide fans with essential insights on riders‚Äô performance. By employing statistical methodologies, we will extract as much insights as possible from the openly accessible data, contending that it is possible to gauge the riders‚Äô objective performances within a race and across the championship. At the same time, we will propose potential data analyses ‚Äì presented as a ‚Äúpost-GP‚Äù information product ‚Äì that can be used by the media to interpret Grand Prix outcomes and which can spark engaging discussions on the competitors‚Äô performance levels and progress.\n\nData is provided thanks to the motogpdata project.\n\n\n\nCode\nimport motogpdata.handler as mgphandler\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "posts/motogp-performance/index.html#race-results",
    "href": "posts/motogp-performance/index.html#race-results",
    "title": "üèçÔ∏è Modelling Riders Performance",
    "section": "Race Results",
    "text": "Race Results\nFor the scope of this study, we will take into account and examine two races from the 2022 MotoGP season, namely the Qatar Grand Prix and the Italian Grand Prix. Let‚Äôs first refresh our memory of the results of these races.\nFor the Qatar Grand Prix:\n\n\nCode\nseason = mgphandler.Season(2022, 'MotoGP')\nqat2022 = mgphandler.Event(season, 'QAT')\nita2022 = mgphandler.Event(season, 'ITA')\n\nresults_subset = ['rider.full_name', 'position', 'average_speed', 'total_laps', 'time', 'points']\nqat2022.results()[results_subset].set_index('rider.full_name')\n\n\n\n\n\n\n\n\n\nposition\naverage_speed\ntotal_laps\ntime\npoints\n\n\nrider.full_name\n\n\n\n\n\n\n\n\n\nEnea Bastianini\n1.0\n168.2\n22\n42:13.1980\n25\n\n\nBrad Binder\n2.0\n168.1\n22\n42:13.5440\n20\n\n\nPol Espargaro\n3.0\n168.1\n22\n42:14.5490\n16\n\n\nAleix Espargaro\n4.0\n168.0\n22\n42:15.4400\n13\n\n\nMarc Marquez\n5.0\n167.9\n22\n42:17.2970\n11\n\n\nJoan Mir\n6.0\n167.8\n22\n42:18.0410\n10\n\n\nAlex Rins\n7.0\n167.6\n22\n42:22.0080\n9\n\n\nJohann Zarco\n8.0\n167.5\n22\n42:23.7340\n8\n\n\nFabio Quartararo\n9.0\n167.5\n22\n42:23.7410\n7\n\n\nTakaaki Nakagami\n10.0\n167.2\n22\n42:28.1650\n6\n\n\nFranco Morbidelli\n11.0\n167.1\n22\n42:29.9100\n5\n\n\nMaverick Vi√±ales\n12.0\n166.6\n22\n42:36.4140\n4\n\n\nLuca Marini\n13.0\n166.4\n22\n42:40.4810\n3\n\n\nAndrea Dovizioso\n14.0\n166.4\n22\n42:40.5720\n2\n\n\nRemy Gardner\n15.0\n165.5\n22\n42:54.3050\n1\n\n\nDarryn Binder\n16.0\n165.5\n22\n42:54.3170\n0\n\n\nFabio Di Giannantonio\n17.0\n165.5\n22\n42:54.5470\n0\n\n\nRaul Fernandez\n18.0\n165.4\n22\n42:55.5550\n0\n\n\nFrancesco Bagnaia\nNaN\n167.2\n11\n21:13.8350\n0\n\n\nJorge Martin\nNaN\n167.2\n11\n21:13.8000\n0\n\n\nMiguel Oliveira\nNaN\n166.9\n10\n19:19.8860\n0\n\n\nAlex Marquez\nNaN\n166.6\n9\n17:25.7820\n0\n\n\nJack Miller\nNaN\n165.4\n6\n11:42.3060\n0\n\n\nMarco Bezzecchi\nNaN\n165.6\n6\n11:41.3210\n0\n\n\n\n\n\n\n\nFor the Italian Grand Prix:\n\n\nCode\nita2022.results()[results_subset].set_index('rider.full_name')\n\n\n\n\n\n\n\n\n\nposition\naverage_speed\ntotal_laps\ntime\npoints\n\n\nrider.full_name\n\n\n\n\n\n\n\n\n\nFrancesco Bagnaia\n1.0\n175.1\n23\n41:18.9230\n25\n\n\nFabio Quartararo\n2.0\n175.1\n23\n41:19.5580\n20\n\n\nAleix Espargaro\n3.0\n175.0\n23\n41:20.9060\n16\n\n\nJohann Zarco\n4.0\n175.0\n23\n41:21.5130\n13\n\n\nMarco Bezzecchi\n5.0\n174.9\n23\n41:21.9900\n11\n\n\nLuca Marini\n6.0\n174.9\n23\n41:22.7980\n10\n\n\nBrad Binder\n7.0\n174.9\n23\n41:22.9900\n9\n\n\nTakaaki Nakagami\n8.0\n174.4\n23\n41:29.8670\n8\n\n\nMiguel Oliveira\n9.0\n174.3\n23\n41:30.1790\n7\n\n\nMarc Marquez\n10.0\n174.3\n23\n41:30.7230\n6\n\n\nFabio Di Giannantonio\n11.0\n174.2\n23\n41:31.8390\n5\n\n\nMaverick Vi√±ales\n12.0\n174.2\n23\n41:31.8400\n4\n\n\nJorge Martin\n13.0\n173.9\n23\n41:36.1630\n3\n\n\nAlex Marquez\n14.0\n173.9\n23\n41:36.4910\n2\n\n\nJack Miller\n15.0\n173.9\n23\n41:36.6100\n1\n\n\nDarryn Binder\n16.0\n173.7\n23\n41:39.1880\n0\n\n\nFranco Morbidelli\n17.0\n173.7\n23\n41:39.2190\n0\n\n\nMichele Pirro\n18.0\n173.6\n23\n41:40.2280\n0\n\n\nRemy Gardner\n19.0\n173.0\n23\n41:49.4710\n0\n\n\nAndrea Dovizioso\n20.0\n173.0\n23\n41:49.9340\n0\n\n\nRaul Fernandez\n21.0\n172.2\n23\n42:01.6460\n0\n\n\nLorenzo Savadori\n22.0\n164.9\n22\n41:58.6110\n0\n\n\nEnea Bastianini\nNaN\n174.8\n13\n23:24.0940\n0\n\n\nJoan Mir\nNaN\n172.8\n7\n12:44.7980\n0\n\n\nAlex Rins\nNaN\n173.5\n7\n12:41.6070\n0\n\n\nPol Espargaro\nNaN\n171.2\n4\n07:21.0900\n0\n\n\n\n\n\n\n\nThe traditional race classification tables (which represent the only type of data considered by most of the media when convering races) do not provide many analytical insights nor objective indicators of riders performances. They merely offer a snapshot of the race outcome; and the final result does not provide a comprehensive evaluation of the competitors‚Äô achievements in the race.\nIt is in fact possible for a rider to finish a race in a certain position thanks to the mistakes of others, even if he has maintained an anonymous performance throughout the competition. In such situations, the most common question that arises is whether or not the rider ‚Äúdeserved‚Äù or not the position he achieved at the end of the race. In other words, we ask: what was the rider‚Äôs performance after accounting for the race events? How can we measure and evaluate his performance regardless of the result obtained?"
  },
  {
    "objectID": "posts/motogp-performance/index.html#laptime-analysis",
    "href": "posts/motogp-performance/index.html#laptime-analysis",
    "title": "üèçÔ∏è Modelling Riders Performance",
    "section": "Laptime analysis",
    "text": "Laptime analysis\nA statistical assessment of race performance is required to address these inquiries, which entails an evaluation based on factual data rather than subjective sentiments or judgments. To accomplish this, the data on lap times must be taken into account, scrutinizing the race‚Äôs overall progress. An illustration of such data for the Qatar race is presented below.\n\n\nCode\n# Extract race analysis data for the Qatar Grand Prix\ntimesheetQAT, laptimes_ridersQAT, laptimes_teamsQAT, laptimes_constructorsQAT, performanceQAT = qat2022.race_analysis(save_pdf=False, performance=True)\nlaptimes_ridersQAT_melted = laptimes_ridersQAT.melt(id_vars='lap', var_name='rider', value_name='laptime')\n\nlaptimes_ridersQAT.head()\n\n\n\n\n\n\n\n\nrider\nAleix Espargaro\nAlex Marquez\nAlex Rins\nAndrea Dovizioso\nBrad Binder\nDarryn Binder\nEnea Bastianini\nFabio Di Giannantonio\nFabio Quartararo\nFrancesco Bagnaia\n...\nMarc Marquez\nMarco Bezzecchi\nMaverick Vi√±ales\nMiguel Oliveira\nPol Espargaro\nRaul Fernandez\nRemy Gardner\nTakaaki Nakagami\navg_laptime\nlap\n\n\nlap\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n121.559\n122.479\n122.363\n123.815\n121.021\n124.531\n121.438\n125.299\n122.042\n121.817\n...\n120.713\n122.419\n124.207\n122.558\n120.669\n125.229\n125.051\n122.755\n122.863542\n1\n\n\n2\n115.237\n116.054\n115.487\n116.887\n115.086\n116.721\n114.953\n116.269\n115.415\n115.135\n...\n115.265\n116.229\n116.618\n116.259\n115.181\n116.272\n116.173\n115.975\n115.839625\n2\n\n\n3\n114.797\n115.223\n114.610\n115.858\n114.846\n115.720\n114.918\n115.982\n115.007\n114.771\n...\n114.875\n115.636\n116.134\n115.488\n114.797\n116.531\n115.974\n115.909\n115.377417\n3\n\n\n4\n115.000\n115.329\n114.706\n115.860\n115.069\n115.591\n114.991\n116.212\n115.171\n115.223\n...\n115.032\n116.318\n116.044\n115.057\n115.076\n116.106\n116.167\n116.029\n115.478208\n4\n\n\n5\n114.944\n115.328\n115.013\n117.290\n114.867\n116.474\n114.956\n116.228\n115.236\n115.105\n...\n114.867\n115.520\n116.015\n115.097\n114.753\n116.326\n116.210\n115.380\n115.526708\n5\n\n\n\n\n5 rows √ó 26 columns\n\n\n\nThe above table (in its comprehensive form) shows the lap times of each rider (expressed in seconds), and provides already a good starting point for deepening the understanding of the time trends and the general race progression. From such data, it is possible to generate some of the following visualizations.\n\n\nCode\nsns.relplot(data=laptimes_ridersQAT_melted[laptimes_ridersQAT_melted['rider'].isin(\n    ['avg_laptime', 'Enea Bastianini', 'Aleix Espargaro', 'Raul Fernandez'])], \n            x='lap', y='laptime', hue='rider', kind='line', \n            palette=['green', 'red', 'darkorange', 'grey'], aspect=1.5)\n\nplt.title(\"Qatar 2022\\nComparative Lap Time Analysis - Riders\")\nplt.xlabel(\"Laps\")\nplt.ylabel(\"Lap times (in seconds)\")\nplt.show()\n\n\n\n\n\nBy projecting the average lap time (gray line), we can appreciate the general trend of the race. For example, in the case of Qatar, there is a decline in overall performance starting from the seventeenth lap. Similarly, there is a significant performance drop in the Italian Grand Prix race starting from the sixteenth lap. This analysis helps to evaluate tire performance.\nRegarding the personal lap times of the riders, we can notice that both Enea Bastianini (who arrived in 1st place) and Aleix Espargaro (who arrived in 4th place) performed well below the average (gray line), unlike Raul Fernandez, for example (orange line), who consistently raced above the general average of the competition. Similar considerations can also be applied to the Italian Grand Prix, as shown below.\n\n\nCode\ntimesheetITA, laptimes_ridersITA, laptimes_teamsITA, laptimes_constructorsITA, performanceITA = ita2022.race_analysis(save_pdf=False, performance=True)\nlaptimes_ridersITA_melted = laptimes_ridersITA.melt(id_vars='lap', var_name='rider', value_name='laptime')\n\nsns.relplot(data=laptimes_ridersITA_melted[laptimes_ridersITA_melted['rider'].isin(\n    ['avg_laptime', 'Francesco Bagnaia', 'Fabio Quartararo', 'Andrea Dovizioso'])], \n            x='lap', y='laptime', hue='rider', kind='line', \n            palette=['aqua', 'blue', 'red', 'grey'], aspect=1.5)\n\nplt.title(\"Mugello 2022\\nComparative Lap Time Analysis - Riders\")\nplt.xlabel(\"Laps\")\nplt.ylabel(\"Lap times (in seconds)\")\nplt.show()\n\n\n\n\n\nThese graphs provide a visual and intuitive way to determine if a particular rider, team, or manufacturer has performed above, below, or at an average level. (It‚Äôs important to note that the more a rider‚Äôs lap times are below the average race‚Äôs lap time, the faster they‚Äôve gone). Using the same visualization concept for the constructors, we can see how Yamaha and KTM consistently performed above average in the Qatar 2022 race, thus indicating that they ‚Äúunderperformed‚Äù compared to the other manufacturers.\n\n\nCode\nlaptimes_constructorsQAT_melted = laptimes_constructorsQAT.melt(id_vars='lap', var_name='constructor', value_name='laptime')\n\nsns.relplot(data=laptimes_constructorsQAT_melted[laptimes_constructorsQAT_melted['constructor'].isin(\n    ['avg_laptime', 'Yamaha', 'KTM'])], \n            x='lap', y='laptime', hue='constructor', kind='line', \n            palette=['darkorange', 'blue', 'grey'], aspect=1.5)\n\nplt.title(\"Qatar 2022\\nComparative Lap Time Analysis - Constructors\")\nplt.xlabel(\"Laps\")\nplt.ylabel(\"Lap times (in seconds)\")\nplt.show()\n\n\n\n\n\n\nSector times\nIn an aggregate manner, it is also possible to determine variation indicators for each sector of the circuit, thereby appreciating the overall level of consistency of the riders in the various sections of the track. For example, we can observe that in the case of the Qatar Grand Prix, the consistency of lap times in different sectors is almost identical, while at Mugello, the sector in which the riders were on average more consistent is T2.\n\n\nCode\nstd_race = pd.DataFrame(timesheetQAT[timesheetQAT['lap'] != 1][['t1', 't2', 't3', 't4']].std())\nstd_race = std_race.pivot_table(columns=std_race.index).round(2)\nstd_race.index = ['œÉ']\nprint(\"üá∂üá¶ Qatar Grand Prix 2022\\nSector Pace:\")\nstd_race\n\n\nüá∂üá¶ Qatar Grand Prix 2022\nSector Pace:\n\n\n\n\n\n\n\n\n\nt1\nt2\nt3\nt4\n\n\n\n\nœÉ\n0.21\n0.23\n0.21\n0.21\n\n\n\n\n\n\n\n\n\nCode\nstd_race = pd.DataFrame(timesheetITA[timesheetITA['lap'] != 1][['t1', 't2', 't3', 't4']].std())\nstd_race = std_race.pivot_table(columns=std_race.index).round(2)\nstd_race.index = ['œÉ']\nprint(\"üáÆüáπ Italian Grand Prix 2022\\nSector pace:\")\nstd_race\n\n\nüáÆüáπ Italian Grand Prix 2022\nSector pace:\n\n\n\n\n\n\n\n\n\nt1\nt2\nt3\nt4\n\n\n\n\nœÉ\n0.46\n0.24\n0.74\n0.45\n\n\n\n\n\n\n\nThe same principle of analysis can be applied to the fastest times set by riders in the different sectors of the track. At the Mugello Grand Prix, we can see, for example, how Yamaha, with Fabio Quartararo, was the fastest in T2 and T3. In contrast, the Ducatis of Bagnaia and Bastianini expressed the best times in the sectors with higher top speeds (T1 and T4) due to the long straights.\n\n\nCode\nby_rider = timesheetITA[timesheetITA['lap'] != 1].groupby(['constructor', 'rider'])[['t1', 't2', 't3', 't4']].min().round(3)\nrider_with_min = by_rider.idxmin()\nconst_t = pd.DataFrame({\n    'rider': rider_with_min, \n    'fastest_time': by_rider.min()})\nconst_t[['constructor', 'rider']] = pd.DataFrame(const_t['rider'].tolist(), index=const_t.index)\nprint(\"üáÆüáπ Italian Grand Prix 2022\\nFastest sector times:\\n\")\nprint(const_t[['constructor', 'rider', 'fastest_time']])\n\n\nüáÆüáπ Italian Grand Prix 2022\nFastest sector times:\n\n   constructor              rider  fastest_time\nt1      Ducati  Francesco Bagnaia        24.868\nt2      Yamaha   Fabio Quartararo        22.499\nt3      Yamaha   Fabio Quartararo        34.842\nt4      Ducati    Enea Bastianini        23.998\n\n\nIn general, analyzing sector times under different measures of aggregation (average time, minimum, maximum, consistency in terms of standard deviation, etc.) can reveal interesting points of comparison to evaluate the adaptation to the track of riders, teams, and constructors."
  },
  {
    "objectID": "posts/motogp-performance/index.html#performance-analysis",
    "href": "posts/motogp-performance/index.html#performance-analysis",
    "title": "üèçÔ∏è Modelling Riders Performance",
    "section": "Performance analysis",
    "text": "Performance analysis\nAlthough an analysis of times like this already gives a clearer idea of the general trend of the race, it alone cannot provide an answer to our initial question. In fact, to quantify riders‚Äô performances, it is necessary to deepen the analysis and develop quantitative indicators.\n\nThe Performance Matrix\nMotorsports performance, can be defined as ‚Äúhow consistently fast a rider/driver has been‚Äù - relative to the number of laps completed. Therefore, at a conceptual level, the so-called ‚Äúpace‚Äù can be theorized as the aggregation of two fundamental variables: consistency and speed. To achieve high positions in the rankings, a rider must in fact be both fast and consistent.\nVisually, the relationship between these two variables can be demonstrated with the help of a matrix - shown below - which we will call ‚Äúperformance matrix‚Äù. The graph represents the ratio between the two indicators (relative speed on the y-axis and relative consistency on the x-axis) for each participant in the race, in relation to the average located at the axes \\(x,y=0\\) (black lines). This means that the performance of the riders located in the upper-right quadrant of the graph are above average, both in terms of speed and consistency. Conversely, those located in the lower-left quadrant have ‚Äúunderperformed‚Äù below average (for both variables).\n\n\nCode\nperf_cols = ['rider', 'constructor', 'grid', 'position', 'pos_delta', 'points', 'avg_laptime', 'avg_speed', 'delta_avg_laptime', 'pace_speed_index', 'delta_std_laptime', 'pace_consistency_index', 'performance_index']\nperformanceQAT = performanceQAT[perf_cols].set_index('rider').round(2)\nperformanceITA = performanceITA[perf_cols].set_index('rider').round(2)\nperformanceITA.loc[performanceITA.index == 'Lorenzo Savadori', 'constructor'] = 'Aprilia'\n\nsns.relplot(data=performanceQAT, \n            x='pace_consistency_index', \n            y='pace_speed_index', hue='constructor', \n            palette=['red', 'darkorange', 'orange', 'green', 'aqua', 'blue'], \n            # size='points', \n            # sizes=[30, 80], \n            # alpha=0.8, \n            legend='brief', aspect=1.5)\n\nplt.title(\"Qatar 2022\\nPerformance Matrix - Riders\")\nplt.xlabel(\"Relative Consistency Indicator (in seconds)\")\nplt.ylabel(\"Relative Speed Indicator (in seconds)\")\n\nplt.axhline(y=0, color='black', linestyle='-', linewidth=2)\nplt.axvline(x=0, color='black', linestyle='-', linewidth=2)\n\nplt.show()\n\n\n\n\n\nIn the case of Qatar, we can see how this graph helps us clearly visualize the struggle of the Ducati teams in having a consistent pace (with the exception of the winner, Bastianini). The Suzuki team had a good overall performance, both in terms of speed and consistency.\n\n\nCode\nsns.relplot(data=performanceITA[performanceITA['performance_index'] &gt; -3], \n            x='pace_consistency_index', \n            y='pace_speed_index', hue='constructor', \n            palette=['red', 'blue', 'green', 'darkorange', 'orange', 'aqua'], \n            # size='points', \n            # sizes=[30, 80], \n            # alpha=0.8, \n            legend='brief', aspect=1.5)\n\nplt.title(\"Mugello 2022\\nPerformance Matrix - Riders\")\nplt.xlabel(\"Relative Consistency Indicator (in seconds)\")\nplt.ylabel(\"Relative Speed Indicator (in seconds)\")\n\nplt.axhline(y=0, color='black', linestyle='-', linewidth=2)\nplt.axvline(x=0, color='black', linestyle='-', linewidth=2)\n\nplt.show()\n\n\n\n\n\nAt Mugello, it‚Äôs interesting to note how the riders who scored points are all grouped in the upper-right quadrant, which means their values for speed and consistency were above average (confirming the demonstrated relationship between the two variables). Only Quartararo (who finished second) demonstrated both consistency and speed among the Yamaha riders, while the other three Yamahas suffered from a noticeable lack of speed that prevented them from scoring points. The Ducati team had a good overall performance, with most of their riders largely confirming their high performance usually demonstrated at their home circuit.\n\n\nA performance-based ranking\nThe two variables quantifying the race pace can be combined to create an index that summarizes a rider‚Äôs performance in a single value. We will call this a ‚Äúperformance indicator‚Äù: an aggregation of the speed and consistency values of a competitor.\nThe following table shows the results of the Qatar race along with these indicators. Specifically, from left to right, it includes the starting position, finishing position, difference in positions at the finish, points earned, speed indicator, consistency indicator, and the aggregated performance indicator. This results table, ordered by the latter variable, presents a ‚Äúrevisited‚Äù ranking based on the performance demonstrated by the riders regardless of the final result and events of the race.\n\n\nCode\nperfQAT = performanceQAT.drop(columns=[\n    'avg_speed', 'avg_laptime', 'delta_avg_laptime',\n    'delta_std_laptime']).sort_values('performance_index', ascending=False).reset_index()\nperfQAT.index += 1\nperfQAT.drop(columns='constructor')\n\n\n\n\n\n\n\n\n\nrider\ngrid\nposition\npos_delta\npoints\npace_speed_index\npace_consistency_index\nperformance_index\n\n\n\n\n1\nBrad Binder\n7\n2.0\n5.0\n20\n0.87\n0.51\n0.69\n\n\n2\nPol Espargaro\n6\n3.0\n3.0\n16\n0.83\n0.52\n0.67\n\n\n3\nEnea Bastianini\n2\n1.0\n1.0\n25\n0.89\n0.39\n0.64\n\n\n4\nMarc Marquez\n3\n5.0\n-2.0\n11\n0.70\n0.59\n0.64\n\n\n5\nAleix Espargaro\n5\n4.0\n1.0\n13\n0.79\n0.39\n0.59\n\n\n6\nJoan Mir\n8\n6.0\n2.0\n10\n0.67\n0.51\n0.59\n\n\n7\nFabio Quartararo\n11\n9.0\n2.0\n7\n0.41\n0.38\n0.40\n\n\n8\nAlex Rins\n10\n7.0\n3.0\n9\n0.49\n0.27\n0.38\n\n\n9\nTakaaki Nakagami\n6\n10.0\n-4.0\n6\n0.21\n0.25\n0.23\n\n\n10\nJohann Zarco\n3\n8.0\n-5.0\n8\n0.41\n-0.06\n0.17\n\n\n11\nFranco Morbidelli\n12\n11.0\n1.0\n5\n0.13\n0.08\n0.10\n\n\n12\nFrancesco Bagnaia\n9\nNaN\n-9.0\n0\n0.12\n-0.09\n0.01\n\n\n13\nJorge Martin\n1\nNaN\n-17.0\n0\n0.12\n-0.28\n-0.08\n\n\n14\nMaverick Vi√±ales\n9\n12.0\n-3.0\n4\n-0.17\n-0.04\n-0.10\n\n\n15\nMiguel Oliveira\n4\nNaN\n-14.0\n0\n0.02\n-0.23\n-0.11\n\n\n16\nAndrea Dovizioso\n10\n14.0\n-4.0\n2\n-0.36\n0.11\n-0.12\n\n\n17\nLuca Marini\n7\n13.0\n-6.0\n3\n-0.35\n0.11\n-0.12\n\n\n18\nAlex Marquez\n8\nNaN\n-10.0\n0\n-0.07\n-0.22\n-0.14\n\n\n19\nMarco Bezzecchi\n5\nNaN\n-13.0\n0\n-0.27\n-0.22\n-0.25\n\n\n20\nJack Miller\n4\nNaN\n-14.0\n0\n-0.23\n-0.35\n-0.29\n\n\n21\nDarryn Binder\n14\n16.0\n-2.0\n0\n-0.98\n0.07\n-0.45\n\n\n22\nRemy Gardner\n12\n15.0\n-3.0\n1\n-0.98\n-0.03\n-0.50\n\n\n23\nFabio Di Giannantonio\n11\n17.0\n-6.0\n0\n-0.99\n-0.06\n-0.53\n\n\n24\nRaul Fernandez\n13\n18.0\n-5.0\n0\n-1.04\n-0.05\n-0.55\n\n\n\n\n\n\n\nIn this ‚Äúnew‚Äù ranking (sorted by the aggregated performance indicator), it is interesting to note that the winner (Enea Bastianini), who dominated the race from the first position since the beginning, is relegated to the third position behind Brad Binder and Pol Espargaro. This is due to the fact that these two riders have shown to have a greater speed and consistency than Enea, who, apart from the victory, has equalled the performance of Marc Marquez.\nThe same concept is applied to the race performances of the constructors in the following table.\n\n\nCode\nperfQAT_constr = perfQAT.groupby('constructor')[['pace_speed_index', 'pace_consistency_index', 'performance_index']].mean().sort_values('performance_index', ascending=False).round(2)\n# perfQAT_constr = perfQAT_constr.sort_values('performance_index', ascending=False).reset_index()\n# perfQAT_constr.index += 1\ndisplay(perfQAT_constr)\n\nsns.relplot(data=perfQAT_constr, \n            x='pace_consistency_index', \n            y='pace_speed_index', hue='constructor', \n            palette=['aqua', 'orange', 'green', 'blue', 'red', 'darkorange'], \n            # size='points', \n            # sizes=[30, 80], \n            # alpha=0.8, \n            legend='brief', aspect=1.5)\n\nplt.title(\"Qatar 2022\\nPerformance Matrix - Constructors\")\nplt.xlabel(\"Relative Consistency Indicator (in seconds)\")\nplt.ylabel(\"Relative Speed Indicator (in seconds)\")\n\nplt.axhline(y=0, color='black', linestyle='-', linewidth=2)\nplt.axvline(x=0, color='black', linestyle='-', linewidth=2)\n\nplt.show()\n\n\n\n\n\n\n\n\n\npace_speed_index\npace_consistency_index\nperformance_index\n\n\nconstructor\n\n\n\n\n\n\n\nSuzuki\n0.58\n0.39\n0.48\n\n\nHonda\n0.42\n0.28\n0.35\n\n\nAprilia\n0.31\n0.18\n0.24\n\n\nYamaha\n-0.20\n0.16\n-0.02\n\n\nDucati\n-0.04\n-0.07\n-0.06\n\n\nKTM\n-0.28\n0.05\n-0.12\n\n\n\n\n\n\n\n\n\n\nAs we can see, thanks in part to the performance matrix applied to the constructors, Suzuki was the most ‚Äúperformant‚Äù motorcycle in Qatar 2022, along with Honda and Aprilia. Ducati, Yamaha, and KTM had inferior performances."
  },
  {
    "objectID": "posts/motogp-performance/index.html#conclusion",
    "href": "posts/motogp-performance/index.html#conclusion",
    "title": "üèçÔ∏è Modelling Riders Performance",
    "section": "Conclusion",
    "text": "Conclusion\nFor the purpose of providing more technical and structured information to motorsports fans, we have demonstrated in this article how public data can be used to extract important insights on race and competitors performance. While the race results remain undoubtedly the reference for assigning race points, it is still crucial to be able to objectively measure and evaluate the pace of each rider, regardless of the outcome at the checkered flag and all the race events. By examining two MotoGP races in the 2022 season, we first established the importance of visually analyzing the race progression in terms of lap times in order to:\n\nExamine the overall evolution of tire performance and degradation;\nCompare the lap time evolution of riders, teams, and constructors (also in relation to the race average).\n\nWe then demonstrated how lap data can be used to analyze the adaptation of riders, teams, and constructors to different track segments, with the help of aggregate metrics for intermediate sector times.\nFinally, we demonstrated the usefulness of quantifying the performances of riders, teams, and constructors through quantitative indicators that take into account relative speed and consistency, the two fundamental variables in a theoretical definition of performance.\nIn conclusion, the research findings confirm the validity of the initial hypothesis and provide a satisfying answer to the questions that were posed at the beginning of the investigation. It is also believed that this study constitutes an important starting point for the creation of an engaging technical information format for motor racing. The ultimate goal is to promote a constructive and informed debate among industry experts and enthusiasts, providing objective information that allows for statistical evaluation of the performances of riders and vehicles. In this way, we could contribute to fostering a more aware and informed motor racing culture, capable of fully appreciating the technical complexity of this type of sport, especially for those more demanding fans."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Portfolio & Blog",
    "section": "",
    "text": "Welcome to my personal repository of data analytics notebooks.\nHere, you will find a collection of studies and analyses in which I make use of data visualization, statistical analysis, data mining, and machine learning to extract important insights from data and solve common case studies on various topics such as business management & marketing, social sciences, sports, and more.\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nüèçÔ∏è Modelling Riders Performance\n\n\nLeveraging public race data to boost fans interest in motorsports\n\n\n\n\nmotogpdata\n\n\nMotorsports\n\n\nPublic Data\n\n\nPython\n\n\n\n\nDelving in the world of MotoGP racing, I illustrate how making use of public race data can provide fans with a more structured and comprehensive understanding of the objective performance of race competitors.\n\n\n\n\n\n\nMay 1, 2023\n\n\nAntonio Buzzelli\n\n\n\n\n\n\n  \n\n\n\n\nüõí Using Market Basket Analysis to penetrate an untapped regional market\n\n\nCustomer-centric bundle deals with Apriori and association rules\n\n\n\n\nOnline Retail\n\n\nMarketing\n\n\nMarket Basket Analysis\n\n\nPython\n\n\n\n\nThrough the analysis of one year of sales data from an e-commerce website, I was able to identify for the firm a promising regional market with untapped potential, and implement a marketing strategy to target it using bundle deals tailored to the specific preferences of its consumers.\n\n\n\n\n\n\nApr 2, 2023\n\n\nAntonio Buzzelli\n\n\n\n\n\n\n  \n\n\n\n\nüö¢ Understanding Survival on the Titanic\n\n\nUsing machine learning to explain phenomena and define business personas\n\n\n\n\nBusiness Personas\n\n\nMachine Learning\n\n\nPython\n\n\n\n\nBusinesses can utilize machine learning not only to make predictions but also to unveil valuable insights that are deeply embedded in their data. Using one of the most commonly used datasets in the study of data science ‚Äì the Titanic dataset ‚Äì, I demonstrate how supervised learning can serve as a data mining technique to achieve a deep understanding of phenomena and generate Personas.\n\n\n\n\n\n\nMar 15, 2023\n\n\nAntonio Buzzelli\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Antonio Buzzelli",
    "section": "",
    "text": "Combining several international experiences in project/business management and a state-of-the-art expertise in data science, my goal is to put at the service of the executive management of a well-established company my capacity to inform data-driven business decisions and strategies."
  }
]