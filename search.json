[
  {
    "objectID": "posts/online-retail-mba/index.html",
    "href": "posts/online-retail-mba/index.html",
    "title": "🛒 Using Market Basket Analysis to penetrate an untapped regional market",
    "section": "",
    "text": "Even though the majority of the volume of sales is concentrated in the UK, the most performing region in terms of average revenue is Asia. The ANOVA analysis shows that the mean purchase value in the Asia/Pacific region is consistently and significantly higher than the mean purchase value in the other regions. We can infer that the Asia/Pacific region is a potentially lucrative market with higher average purchase amounts than the other regions. Therefore, the store may want to consider investing more resources in this region to take advantage of this opportunity to increase volume of sales.\nBy conducting a market basket analysis with a focus on the Asian market, we have identified groups of products that are commonly bought together. This has helped us uncover the specific preferences and purchasing patterns of this region. The firm could use this information to create bundled offers that combine these item sets and boost sales volume in the Asian market, ultimately leading to an increase in revenue."
  },
  {
    "objectID": "posts/online-retail-mba/index.html#country-level",
    "href": "posts/online-retail-mba/index.html#country-level",
    "title": "🛒 Using Market Basket Analysis to penetrate an untapped regional market",
    "section": "Country level",
    "text": "Country level\n\n\nCode\nbycountry = df.groupby('Country').agg(\n    tot_amount=('Amount', 'sum'),\n    mean_amount=('Amount', 'mean')\n).sort_values('tot_amount', ascending=False)\n\n# display(bycountry.head())\n\nfig, ax = plt.subplots(2, figsize=(15,10))\nax[0].bar(bycountry.index, bycountry['tot_amount'])\nax[1].bar(bycountry.sort_values('mean_amount', ascending=False).index, bycountry.sort_values('mean_amount', ascending=False)['mean_amount'])\nplt.setp(ax, xticks=bycountry.index, xticklabels=bycountry.index)\nplt.setp(ax[0].get_xticklabels(), rotation=90, ha=\"center\")\nplt.setp(ax[1].get_xticklabels(), rotation=90, ha=\"center\")\n\nax[0].set_ylabel(\"Amount (GBP)\")\nax[1].set_ylabel(\"Amount (GBP)\")\nax[0].set_title(\"Countries by total amount sold\")\nax[1].set_title(\"Countries by average amount sold\")\nplt.suptitle(\"Overview on geographical market spread\")\nax[0].grid(axis='y')\nax[1].grid(axis='y')\nplt.subplots_adjust(hspace=0.7)\n\nplt.show()"
  },
  {
    "objectID": "posts/online-retail-mba/index.html#national-vs.-international-level",
    "href": "posts/online-retail-mba/index.html#national-vs.-international-level",
    "title": "🛒 Using Market Basket Analysis to penetrate an untapped regional market",
    "section": "National vs. international level",
    "text": "National vs. international level\n\n\nCode\n# Creating a column to differentiation between national vs. international sales\ndf['UKvsRoW'] = np.where(df['Country'] == 'United Kingdom', 'UK', 'RoW')\n\nbyukvsrow = df.groupby('UKvsRoW').agg(\n    tot_amount=('Amount', 'sum'),\n    mean_amount=('Amount', 'mean'),\n    n_inv=('TransactionNo', 'nunique'),\n    quantity=('Quantity', 'mean')\n).sort_values('mean_amount', ascending=False)\n\ndisplay(byukvsrow)\n\nplt.pie(byukvsrow['tot_amount'], labels=byukvsrow.index, autopct='%1.1f%%', explode=(0.1,0), shadow=True)\nplt.title('Total revenue by UK vs other countries')\nplt.show()\n\n\n\n\n\n\n\n\n\ntot_amount\nmean_amount\nn_inv\nquantity\n\n\nUKvsRoW\n\n\n\n\n\n\n\n\nRoW\n10258462.78\n211.383944\n1809\n18.478900\n\n\nUK\n50192562.28\n110.502027\n17164\n9.646163\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nrow_rev = df.loc[df['UKvsRoW'] == 'RoW', 'Amount']\nuk_rev = df.loc[df['UKvsRoW'] == 'UK', 'Amount']\n\n# We perform a two-sample ttest to check for statistically significant difference in average sales between national and international markets\nttest_ind(uk_rev, row_rev)\n\n\nTtest_indResult(statistic=-16.7279858606087, pvalue=8.524026769071223e-63)\n\n\n\nEven though the volume of sales of international customers accounts only for the 17.0%, a two-sample ttest demonstrates that the average revenue generated abroad is significantly higher than the one generated in the UK. This means that international markets for this business are potentially more lucrative than the national one and need to be exploited more."
  },
  {
    "objectID": "posts/online-retail-mba/index.html#regional-level",
    "href": "posts/online-retail-mba/index.html#regional-level",
    "title": "🛒 Using Market Basket Analysis to penetrate an untapped regional market",
    "section": "Regional level",
    "text": "Regional level\n\n\nCode\n# Mapping regions\nregions = {'Europe': ['Sweden', 'Denmark', 'Norway', 'Finland', 'Iceland', 'Netherlands', 'Belgium', 'France', 'Germany', 'Switzerland', 'Austria',\n                      'Italy', 'Spain', 'Greece', 'Portugal', 'Malta', 'Cyprus', 'Czech Republic', 'Lithuania', 'Poland', 'United Kingdom', 'EIRE',\n                      'Channel Islands', 'European Community'],\n           'North America': ['USA', 'Canada'],\n           'Middle East': ['Bahrain', 'United Arab Emirates', 'Israel', 'Lebanon', 'Saudi Arabia'],\n           'Asia Pacific': ['Japan', 'Australia', 'Singapore', 'Hong Kong'],\n           'RoW': ['Brazil', 'RSA'],\n           'Unspecified': ['Unspecified']}\n\ncountry_to_region = {}\nfor region, countries in regions.items():\n    for country in countries:\n        country_to_region[country] = region\n\ndf['Region'] = df['Country'].map(country_to_region)\n\nbyregion = df.groupby('Region').agg(\n    tot_amount=('Amount', 'sum'),\n    mean_amount=('Amount', 'mean'),\n    n_inv=('TransactionNo', 'nunique'),\n    quantity=('Quantity', 'mean')\n).sort_values('mean_amount', ascending=False)\n\ndisplay(byregion.sort_values('mean_amount', ascending=False))\n\nfig, ax1 = plt.subplots(figsize=(15,5))\nax1 = plt.bar(byregion.index, byregion['mean_amount'])\nplt.title(\"Average purchase value by region\")\nplt.ylabel('Amount (GBP)')\nplt.xlabel('Region')\nplt.grid(axis='y')\nplt.show()\n\n\n\n\n\n\n\n\n\ntot_amount\nmean_amount\nn_inv\nquantity\n\n\nRegion\n\n\n\n\n\n\n\n\nAsia Pacific\n1380079.80\n590.787586\n92\n51.083904\n\n\nNorth America\n59633.28\n154.891636\n11\n13.503896\n\n\nMiddle East\n76798.30\n154.835282\n16\n12.661290\n\n\nEurope\n58892902.53\n118.021612\n18839\n10.308538\n\n\nRoW\n8912.10\n101.273864\n2\n8.000000\n\n\nUnspecified\n32699.05\n73.152237\n13\n6.272931\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nf_value, p_value = f_oneway(\n    df.loc[df['Region'] == 'Asia Pacific', 'Amount'],\n    df.loc[df['Region'] == 'North America', 'Amount'],\n    df.loc[df['Region'] == 'Middle East', 'Amount'],\n    df.loc[df['Region'] == 'Europe', 'Amount'],\n    df.loc[df['Region'] == 'RoW', 'Amount'])\nprint(f'ANOVA F-value: {f_value:.2f}')\nprint(f'ANOVA p-value: {p_value:.4f}')\ntukey_df = df.filter(items=['Amount', 'Region']).dropna()\nprint(pairwise_tukeyhsd(tukey_df['Amount'], tukey_df['Region']))\n\n\nANOVA F-value: 81.58\nANOVA p-value: 0.0000\n          Multiple Comparison of Means - Tukey HSD, FWER=0.05          \n=======================================================================\n    group1        group2     meandiff p-adj    lower     upper   reject\n-----------------------------------------------------------------------\n Asia Pacific        Europe  -472.766    0.0 -547.3921 -398.1398   True\n Asia Pacific   Middle East -435.9523    0.0  -613.855 -258.0496   True\n Asia Pacific North America -435.8959    0.0 -633.8256 -237.9663   True\n Asia Pacific           RoW -489.5137 0.0048 -880.2663  -98.7612   True\n Asia Pacific   Unspecified -517.6353    0.0 -703.4071 -331.8636   True\n       Europe   Middle East   36.8137 0.9872  -124.841  198.4683  False\n       Europe North America     36.87 0.9928 -146.5938  220.3338  False\n       Europe           RoW  -16.7477    1.0 -400.3757  366.8802  False\n       Europe   Unspecified  -44.8694 0.9754 -215.1456  125.4068  False\n  Middle East North America    0.0564    1.0 -244.3599  244.4726  False\n  Middle East           RoW  -53.5614 0.9991 -469.7954  362.6726  False\n  Middle East   Unspecified   -81.683 0.9207 -316.3622  152.9961  False\nNorth America           RoW  -53.6178 0.9992 -478.7971  371.5616  False\nNorth America   Unspecified  -81.7394 0.9386 -331.9414  168.4626  False\n          RoW   Unspecified  -28.1216    1.0 -447.7792   391.536  False\n-----------------------------------------------------------------------\n\n\n\nWe can observe from both the bar plot and the ANOVA analysis that the mean purchase value in the Asia/Pacific region is consistently and significantly higher than the mean purchase value in the other regions. Based on this important information, we can infer that the Asia/Pacific region is a potentially lucrative market with higher average purchase amounts than the other regions. Therefore, the store may want to consider investing more resources in this region to take advantage of this opportunity to increase volume of sales. The business can consider implementing targeted marketing strategies, such as advertising campaigns and promotions, that cater to the preferences and interests of the Asia/Pacific market. Additionally, it can explore expanding its product offerings to meet the specific demands of this region, or enhancing the quality of existing products to meet their higher standards. It may be useful to conduct further research and analysis to gain deeper insights into the preferences and behavior of customers in the Asia/Pacific region, and tailor sales strategies accordingly."
  },
  {
    "objectID": "posts/online-retail-mba/index.html#bundle-offers",
    "href": "posts/online-retail-mba/index.html#bundle-offers",
    "title": "🛒 Using Market Basket Analysis to penetrate an untapped regional market",
    "section": "Bundle offers",
    "text": "Bundle offers\nBased on the observation that these items are frequently bought together, it could be advantageous to offer them as bundles to customers. The firm could offer convenience and value to customers while potentially increasing sales and revenue. For example, a bundle might include both the Blue Polkadot Bowl and the Pink Polkadot Bowl, or the Dolly Girl Lunch Box and the Spaceboy Lunch Box. This strategy can be an effective way to meet Asian customers needs while boosting profits for the retailer.\n\n\nCode\n# Since we want to create bundle offers for single products, we filter for single items\nrules = rules[(rules['n_antecedents'] == 1) & (rules['n_consequents'] == 1)]\ndisplay(rules.sort_values('support', ascending=False))\n\nrules['antecedent'] = rules['antecedents'].apply(lambda x: list(x)[0])\nrules['consequent'] = rules['consequents'].apply(lambda x: list(x)[0])\nrules['rule'] = rules.index\n\ncoords = rules[['antecedent', 'consequent', 'rule']]\n\nparallel_coordinates(coords, 'rule', colormap='ocean')\nplt.title('Bundle offers for the Asian / Pacific market')\nplt.show()\n\n\n\n\n\n\n\n\n\nantecedents\nconsequents\nantecedent support\nconsequent support\nsupport\nconfidence\nlift\nleverage\nconviction\nn_antecedents\nn_consequents\n\n\n\n\n6\n(Dolly Girl Lunch Box)\n(Spaceboy Lunch Box)\n0.097826\n0.108696\n0.097826\n1.0\n9.200000\n0.087193\ninf\n1\n1\n\n\n0\n(Alarm Clock Bakelike Red)\n(Alarm Clock Bakelike Green)\n0.065217\n0.065217\n0.065217\n1.0\n15.333333\n0.060964\ninf\n1\n1\n\n\n1\n(Alarm Clock Bakelike Green)\n(Alarm Clock Bakelike Red)\n0.065217\n0.065217\n0.065217\n1.0\n15.333333\n0.060964\ninf\n1\n1\n\n\n2\n(Basket Of Toadstools)\n(Set 3 Retrospot Tea/Coffee/Sugar)\n0.054348\n0.076087\n0.054348\n1.0\n13.142857\n0.050213\ninf\n1\n1\n\n\n3\n(Blue Happy Birthday Bunting)\n(Pink Happy Birthday Bunting)\n0.054348\n0.076087\n0.054348\n1.0\n13.142857\n0.050213\ninf\n1\n1\n\n\n4\n(Blue Polkadot Bowl)\n(Pink Polkadot Bowl)\n0.054348\n0.054348\n0.054348\n1.0\n18.400000\n0.051394\ninf\n1\n1\n\n\n5\n(Pink Polkadot Bowl)\n(Blue Polkadot Bowl)\n0.054348\n0.054348\n0.054348\n1.0\n18.400000\n0.051394\ninf\n1\n1\n\n\n7\n(Fairy Tale Cottage Night Light)\n(Red Toadstool Led Night Light)\n0.054348\n0.119565\n0.054348\n1.0\n8.363636\n0.047850\ninf\n1\n1\n\n\n8\n(Feltcraft Princess Lola Doll)\n(Feltcraft Princess Olivia Doll)\n0.054348\n0.076087\n0.054348\n1.0\n13.142857\n0.050213\ninf\n1\n1\n\n\n9\n(Green Regency Teacup And Saucer)\n(Roses Regency Teacup And Saucer)\n0.054348\n0.097826\n0.054348\n1.0\n10.222222\n0.049031\ninf\n1\n1\n\n\n10\n(Set Of 4 Knick Knack Tins Leaf)\n(Set Of 4 Knick Knack Tins Doily)\n0.054348\n0.076087\n0.054348\n1.0\n13.142857\n0.050213\ninf\n1\n1\n\n\n11\n(Set Of 6 Tea Time Baking Cases)\n(Set Of 6 Snack Loaf Baking Cases)\n0.054348\n0.054348\n0.054348\n1.0\n18.400000\n0.051394\ninf\n1\n1\n\n\n12\n(Set Of 6 Snack Loaf Baking Cases)\n(Set Of 6 Tea Time Baking Cases)\n0.054348\n0.054348\n0.054348\n1.0\n18.400000\n0.051394\ninf\n1\n1\n\n\n\n\n\n\n\n\n\n\n\nThe parallel coordinates plot visually highlights the bundles that were put together for the Asian market, and that the firm should offer on their e-commerce.\n\nOffering bundles of products that are already sold together as frequent itemsets can be an effective marketing strategy for several reasons:\n\nConvenience: Bundling products that are frequently purchased together can provide customers with a convenient and streamlined shopping experience. Instead of having to search for each product individually, customers can purchase them together in a single transaction.\nValue proposition: Bundling products can create a compelling value proposition for customers. By offering a discount or special deal on a bundle of products, customers may be more likely to make a purchase than if they were buying each item individually.\nIncreased sales: Bundling can also lead to increased sales by encouraging customers to purchase additional products that they may not have otherwise considered. For example, a customer who only intended to buy coffee may be enticed to buy a bundle that includes coffee, a mug, and a bag of coffee beans.\nUpselling opportunities: Bundling can also provide opportunities for upselling by encouraging customers to purchase a higher-value bundle that includes additional products or features.\n\nIn summary, while some products may already be sold together as frequent itemsets, bundling can provide additional value and convenience for customers, as well as opportunities for increased sales and upselling. By offering bundles, businesses can differentiate themselves from competitors and create a more compelling value proposition for their customers."
  },
  {
    "objectID": "posts/titanic/index.html",
    "href": "posts/titanic/index.html",
    "title": "🚢 Understanding Survival on the Titanic",
    "section": "",
    "text": "Using a machine learning model to predict the probability of a passenger’s survival on the Titanic, a Persona has been defined to characterize those who survived."
  },
  {
    "objectID": "posts/titanic/index.html#transformations-feature-engineering-preprocessing",
    "href": "posts/titanic/index.html#transformations-feature-engineering-preprocessing",
    "title": "🚢 Understanding Survival on the Titanic",
    "section": "Transformations, feature engineering, preprocessing",
    "text": "Transformations, feature engineering, preprocessing\nIn this first section we are going to explore and process the given dataset and prepare it for modeling. Let’s first take a general look at the variables from a structural point-of-view.\n\n\nCode\ndf.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n\n\nPassengerId column is a useless variable in terms of prediction capabilities. We can set it as dataframe index (or drop it) to keep it out of scope.\n\ndf = df.set_index('PassengerId')\n# df = df.drop(columns=['PassengerId'])\n\nTo give more weight to first class (and vice-versa) Pclass values must be inverted.\n\nconditions = [df['Pclass'] == 1, df['Pclass'] == 3]\nchoices = [3, 1]\ndf['Pclass'] = np.select(conditions, choices, 2)\n\nLet’s assess now the presence of null values. Percentage of null values per variable:\n\n\nCode\ndisplay((df.isnull().sum() / df.shape[0]).round(3).sort_values(ascending=False))\n\n\nCabin       0.771\nAge         0.199\nEmbarked    0.002\nSurvived    0.000\nPclass      0.000\nName        0.000\nSex         0.000\nSibSp       0.000\nParch       0.000\nTicket      0.000\nFare        0.000\ndtype: float64\n\n\nA part from a negligeable presence of null values in the Embarked variable, we can see that important columns such as Cabin and Age are full of empty observations. Before proceeding with the model development, we’ll have to deal with these inconsistencies.\n\n\nCode\ndf['Cabin'].unique()\n\n\narray([nan, 'C85', 'C123', 'E46', 'G6', 'C103', 'D56', 'A6',\n       'C23 C25 C27', 'B78', 'D33', 'B30', 'C52', 'B28', 'C83', 'F33',\n       'F G73', 'E31', 'A5', 'D10 D12', 'D26', 'C110', 'B58 B60', 'E101',\n       'F E69', 'D47', 'B86', 'F2', 'C2', 'E33', 'B19', 'A7', 'C49', 'F4',\n       'A32', 'B4', 'B80', 'A31', 'D36', 'D15', 'C93', 'C78', 'D35',\n       'C87', 'B77', 'E67', 'B94', 'C125', 'C99', 'C118', 'D7', 'A19',\n       'B49', 'D', 'C22 C26', 'C106', 'C65', 'E36', 'C54',\n       'B57 B59 B63 B66', 'C7', 'E34', 'C32', 'B18', 'C124', 'C91', 'E40',\n       'T', 'C128', 'D37', 'B35', 'E50', 'C82', 'B96 B98', 'E10', 'E44',\n       'A34', 'C104', 'C111', 'C92', 'E38', 'D21', 'E12', 'E63', 'A14',\n       'B37', 'C30', 'D20', 'B79', 'E25', 'D46', 'B73', 'C95', 'B38',\n       'B39', 'B22', 'C86', 'C70', 'A16', 'C101', 'C68', 'A10', 'E68',\n       'B41', 'A20', 'D19', 'D50', 'D9', 'A23', 'B50', 'A26', 'D48',\n       'E58', 'C126', 'B71', 'B51 B53 B55', 'D49', 'B5', 'B20', 'F G63',\n       'C62 C64', 'E24', 'C90', 'C45', 'E8', 'B101', 'D45', 'C46', 'D30',\n       'E121', 'D11', 'E77', 'F38', 'B3', 'D6', 'B82 B84', 'D17', 'A36',\n       'B102', 'B69', 'E49', 'C47', 'D28', 'E17', 'A24', 'C50', 'B42',\n       'C148'], dtype=object)\n\n\n\n\nCode\ndisplay(df['Cabin'].value_counts().head(30))\n\n\nCabin\nB96 B98            4\nG6                 4\nC23 C25 C27        4\nC22 C26            3\nF33                3\nF2                 3\nE101               3\nD                  3\nC78                2\nC93                2\nE8                 2\nD36                2\nB77                2\nC123               2\nE121               2\nE44                2\nD35                2\nC125               2\nE67                2\nB35                2\nB18                2\nE24                2\nB49                2\nC65                2\nB20                2\nB5                 2\nB57 B59 B63 B66    2\nC126               2\nB51 B53 B55        2\nF4                 2\nName: count, dtype: int64\n\n\nWe can see that the majority of the cabins in the dataset seem to follow a pattern of a letter followed by a two or three digit number, suggesting that the letter represents the section or deck where the cabin is situated and the number represents the room number. It is reasonable to assume that knowing the section where a passenger’s cabin is located would provide valuable information about their likelihood of survival. Therefore, it would be beneficial to clean up the column containing cabin information to extract useful insights.\n\ntrans_df = df.copy()\n\n# Splitting Cabin variable into Deck and Room variables\ntrans_df['CabinData'] = trans_df['Cabin'].isnull().apply(lambda x: not x)\ntrans_df['Deck'] = trans_df['Cabin'].str.slice(0,1)\ntrans_df['Room'] = trans_df['Cabin'].str.slice(1,5).str.extract(\"([0-9]+)\", expand=False).astype(\"float\")\n\ntrans_df[['Survived', 'CabinData']] = trans_df[['Survived', 'CabinData']].astype(int)\n\n# Label-encoding target variable\ntrans_df['Female'] = np.where(trans_df['Sex'] == 'female', 1, 0)\n\n# Drop useless variables for modeling\ntrans_df = trans_df.drop(columns=['Name', 'Ticket', 'Cabin', 'Sex', 'Room'])\n\n# Create one-hot encoding of the categorical variable\ndf_encoded = pd.get_dummies(trans_df, columns=['Deck', 'Embarked'])\n\n# Impute missing values with KNN imputer\nimputer = KNNImputer(n_neighbors=8)\nimputed_df = imputer.fit_transform(df_encoded)\nimputed_df = pd.DataFrame(imputed_df, columns=df_encoded.columns)\n\nimputed_df\n\n\n\n\n\n\n\n\nSurvived\nPclass\nAge\nSibSp\nParch\nFare\nCabinData\nFemale\nDeck_A\nDeck_B\nDeck_C\nDeck_D\nDeck_E\nDeck_F\nDeck_G\nDeck_T\nEmbarked_C\nEmbarked_Q\nEmbarked_S\n\n\n\n\n0\n0.0\n1.0\n22.00\n1.0\n0.0\n7.2500\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n1\n1.0\n3.0\n38.00\n1.0\n0.0\n71.2833\n1.0\n1.0\n0.0\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n\n\n2\n1.0\n1.0\n26.00\n0.0\n0.0\n7.9250\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n3\n1.0\n3.0\n35.00\n1.0\n0.0\n53.1000\n1.0\n1.0\n0.0\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n4\n0.0\n1.0\n35.00\n0.0\n0.0\n8.0500\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n886\n0.0\n2.0\n27.00\n0.0\n0.0\n13.0000\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n887\n1.0\n3.0\n19.00\n0.0\n0.0\n30.0000\n1.0\n1.0\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n888\n0.0\n1.0\n23.75\n1.0\n2.0\n23.4500\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n\n\n889\n1.0\n3.0\n26.00\n0.0\n0.0\n30.0000\n1.0\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n0.0\n\n\n890\n0.0\n1.0\n32.00\n0.0\n0.0\n7.7500\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n1.0\n0.0\n\n\n\n\n891 rows × 19 columns"
  },
  {
    "objectID": "posts/titanic/index.html#model-selection",
    "href": "posts/titanic/index.html#model-selection",
    "title": "🚢 Understanding Survival on the Titanic",
    "section": "Model selection",
    "text": "Model selection\nThen we compare three classifiers and choose the best one in terms of accuracy.\n\n# Define sklearn pipelines for classifier comparison\n\nlogistic_pipeline = Pipeline([\n#     ('scaler', StandardScaler()),\n    ('logistic', LogisticRegression(max_iter=1000))\n])\n\nrf_pipeline = Pipeline([\n#     ('scaler', StandardScaler()),\n    ('rf', RandomForestClassifier(random_state=42))\n])\n\nsvm_pipeline = Pipeline([\n#     ('scaler', StandardScaler()),\n    ('svm', SVC())\n])\n\npipelines = [logistic_pipeline, rf_pipeline, svm_pipeline]\nfor pipeline in pipelines:\n    scores = cross_val_score(pipeline, X_train, y_train, cv=kf)\n    print(f\"Pipeline: {pipeline.named_steps.keys()} Mean Cross-Validation Score: {scores.mean().round(3)}\")\n    \n    pipeline.fit(X_train, y_train)\n    y_pred = pipeline.predict(X_test)\n    print(f\"Test accuracy score: {round(accuracy_score(y_pred, y_test), 3)}\")\n    \n    # Calculate the confusion matrix\n    cm = confusion_matrix(y_test, y_pred)\n    cmd = ConfusionMatrixDisplay(cm)\n    fig, ax = plt.subplots()\n    cmd.plot(ax=ax, cmap=plt.cm.Blues)\n    ax.set_title(f\"Confusion Matrix\\n{pipeline[0]}\")\n    plt.show()\n\nPipeline: dict_keys(['logistic']) Mean Cross-Validation Score: 0.792\nTest accuracy score: 0.821\nPipeline: dict_keys(['rf']) Mean Cross-Validation Score: 0.8\nTest accuracy score: 0.798\nPipeline: dict_keys(['svm']) Mean Cross-Validation Score: 0.695\nTest accuracy score: 0.65\n\n\n\n\n\n\n\n\n\n\n\nAs we can see, the classification model with the highest accuracy score (mean cross-validation score) is the Random Forest Classifier. We are going to use this specific model to predict survival on the Titanic."
  },
  {
    "objectID": "posts/titanic/index.html#prediction-with-random-forest-classifier",
    "href": "posts/titanic/index.html#prediction-with-random-forest-classifier",
    "title": "🚢 Understanding Survival on the Titanic",
    "section": "Prediction with Random Forest Classifier",
    "text": "Prediction with Random Forest Classifier\nAfter having chosen the right classifier for the job, we train it on the train set with GridSearchCV, that performs an exhaustive search over a specified hyperparameter space for an estimator. It takes as input an estimator, a dictionary of hyperparameters, and a cross-validation strategy. It then fits the estimator on all possible combinations of hyperparameters and evaluates the performance of each combination using cross-validation.\nThe GridSearchCV class is useful for finding the best hyperparameters for a machine learning model. By testing all possible combinations of hyperparameters, it can help to identify the combination that results in the best performance on a given dataset.\n\nparam_grid = {\n    'rf__n_estimators': [10, 50, 100],\n    'rf__max_depth': [None, 5, 10],\n    'rf__min_samples_split': [2, 5, 10],\n    'rf__min_samples_leaf': [1, 2, 4]\n}\n\ngrid_search = GridSearchCV(estimator=rf_pipeline, param_grid=param_grid, cv=kf)\ngrid_search.fit(X_train, y_train)\n\nprint(\"Best parameters:\", grid_search.best_params_)\nprint(\"Best score:\", grid_search.best_score_)\n\ny_pred = grid_search.predict(X_test)\nprint(\"Test set accuracy:\", grid_search.score(X_test, y_test))\n\nestimator = grid_search.best_estimator_.named_steps['rf']\n\n # Calculate the confusion matrix\ncm = confusion_matrix(y_test, y_pred)\ncmd = ConfusionMatrixDisplay(cm)\nfig, ax = plt.subplots()\ncmd.plot(ax=ax, cmap=plt.cm.Blues)\nax.set_title(f\"Confusion Matrix\\n{estimator}\")\nplt.show()\n\nBest parameters: {'rf__max_depth': None, 'rf__min_samples_leaf': 2, 'rf__min_samples_split': 2, 'rf__n_estimators': 50}\nBest score: 0.8294657026979368\nTest set accuracy: 0.8207282913165266\n\n\n\n\n\nWe have taken the best performing algorithm and trained it on our dataset with a GridSearchCV and KFold cross validation. The perfomance on the test set suggests that the chosen classification model is able to predict Survival with an 82% of accuracy. As a final step, we are going to explain the variables which have been taken into consideration by the classifier in the prediction, and draw conclusions on the “Survived Persona”.\n\nshap_values = shap.TreeExplainer(estimator).shap_values(X_test)\nshap.summary_plot(shap_values[1], X_test)\n\nNo data for colormapping provided via 'c'. Parameters 'vmin', 'vmax' will be ignored\n\n\n\n\n\nThe SHAP (SHapley Additive exPlanations) summary plot is a powerful tool for interpreting the output of a tree-based model, such as a Random Forest Classifier, using a TreeExplainer. The plot displays the features in order of their importance, as measured by their mean absolute SHAP values. Here’s how to interpret the SHAP summary plot for a TreeExplainer:\n\nFeature importance: The features are listed along the y-axis of the plot, with the most important features at the top. The importance of each feature is represented by its mean absolute SHAP value, which is indicated by the horizontal bars.\nImpact on prediction: The color of the bars represents the direction and magnitude of the feature’s impact on the model’s prediction. Red bars indicate a positive impact on the prediction, while blue bars indicate a negative impact. The length of the bar represents the magnitude of the impact, with longer bars indicating a greater impact.\nRelationship between feature and prediction: The position of each bar relative to the center line indicates the direction and strength of the relationship between the feature and the prediction. Features that push the prediction towards the top of the plot are associated with higher predicted probabilities, while features that push the prediction towards the bottom are associated with lower predicted probabilities.\nInteractions between features: The spacing between the bars for each feature represents the degree of interaction between that feature and other features in the model. If the bars for two features are close together, it indicates that those features tend to interact with each other in the model."
  },
  {
    "objectID": "posts/motogp-performance/index.html",
    "href": "posts/motogp-performance/index.html",
    "title": "🏍️ Modelling Riders Performance",
    "section": "",
    "text": "For the purpose of providing more technical and structured insights to fans, we demonstrate how public race data can be used to extract important information on race and rider performance.\nWe demonstrate how to quantify the performances of riders, teams, and constructors through quantitative indicators that take into account relative speed and consistency, the two fundamental variables in the theoretical definition of “performance.”"
  },
  {
    "objectID": "posts/motogp-performance/index.html#sector-times",
    "href": "posts/motogp-performance/index.html#sector-times",
    "title": "🏍️ Modelling Riders Performance",
    "section": "Sector times",
    "text": "Sector times\nIn an aggregate manner, it is also possible to determine variation indicators for each sector of the circuit, thereby appreciating the overall level of consistency of the riders in the various sections of the track. For example, we can observe that in the case of the Qatar Grand Prix, the consistency of lap times in different sectors is almost identical, while at Mugello, the sector in which the drivers were on average more consistent is T2.\n\n\nCode\nstd_race = pd.DataFrame(timesheetQAT[timesheetQAT['lap'] != 1][['t1', 't2', 't3', 't4']].std())\nstd_race = std_race.pivot_table(columns=std_race.index).round(2)\nstd_race.index = ['σ']\nprint(\"🇶🇦 Qatar Grand Prix 2022\\nSector Pace:\")\nstd_race\n\n\n🇶🇦 Qatar Grand Prix 2022\nSector Pace:\n\n\n\n\n\n\n\n\n\nt1\nt2\nt3\nt4\n\n\n\n\nσ\n0.21\n0.23\n0.21\n0.21\n\n\n\n\n\n\n\n\n\nCode\nstd_race = pd.DataFrame(timesheetITA[timesheetITA['lap'] != 1][['t1', 't2', 't3', 't4']].std())\nstd_race = std_race.pivot_table(columns=std_race.index).round(2)\nstd_race.index = ['σ']\nprint(\"🇮🇹 Italian Grand Prix 2022\\nSector pace:\")\nstd_race\n\n\n🇮🇹 Italian Grand Prix 2022\nSector pace:\n\n\n\n\n\n\n\n\n\nt1\nt2\nt3\nt4\n\n\n\n\nσ\n0.46\n0.24\n0.74\n0.45\n\n\n\n\n\n\n\nThe same principle of analysis can be applied to the fastest times set by riders in the different sectors of the track. At the Mugello Grand Prix, we can see, for example, how Yamaha, with Fabio Quartararo, was the fastest in T2 and T3. In contrast, the Ducatis of Bagnaia and Bastianini expressed the best times in the sectors with higher top speeds (T1 and T4).\n\n\nCode\nby_rider = timesheetITA[timesheetITA['lap'] != 1].groupby(['constructor', 'rider'])[['t1', 't2', 't3', 't4']].min().round(3)\nrider_with_min = by_rider.idxmin()\nconst_t = pd.DataFrame({\n    'rider': rider_with_min, \n    'fastest_time': by_rider.min()})\nconst_t[['constructor', 'rider']] = pd.DataFrame(const_t['rider'].tolist(), index=const_t.index)\nprint(\"🇮🇹 Italian Grand Prix 2022\\nFastest sector times:\\n\")\nprint(const_t[['constructor', 'rider', 'fastest_time']])\n\n\n🇮🇹 Italian Grand Prix 2022\nFastest sector times:\n\n   constructor              rider  fastest_time\nt1      Ducati  Francesco Bagnaia        24.868\nt2      Yamaha   Fabio Quartararo        22.499\nt3      Yamaha   Fabio Quartararo        34.842\nt4      Ducati    Enea Bastianini        23.998\n\n\nIn general, analyzing sector times under different measures of aggregation (average time, minimum, maximum, consistency in terms of standard deviation, etc.) can reveal interesting points of comparison to evaluate the adaptation to the track of riders, teams, and constructors."
  },
  {
    "objectID": "posts/motogp-performance/index.html#the-performance-matrix",
    "href": "posts/motogp-performance/index.html#the-performance-matrix",
    "title": "🏍️ Modelling Riders Performance",
    "section": "The Performance Matrix",
    "text": "The Performance Matrix\nMotorsports performance, can be defined as “how consistently fast a rider has been” - relative to the number of laps completed. Therefore, at a conceptual level, the so-called “pace” can be theorized as the aggregation of two fundamental variables: consistency and speed. To achieve high positions in the rankings, a rider must in fact be both fast and consistent.\nVisually, the relationship between these two variables can be demonstrated with the help of a matrix - shown below - which we will call the “performance matrix”. The graph represents the ratio between the two indicators (relative speed on the y-axis and relative consistency on the x-axis) for each participant in the race, in relation to their average located at the axes \\(x,y=0\\) (black lines). This means that the performance of the riders located in the upper-right quadrant of the graph are above average, both in terms of speed and consistency. Conversely, those located in the lower-left quadrant have “underperformed” below average (for both variables).\n\n\nCode\nperf_cols = ['rider', 'constructor', 'grid', 'position', 'pos_delta', 'points', 'avg_laptime', 'avg_speed', 'delta_avg_laptime', 'pace_speed_index', 'delta_std_laptime', 'pace_consistency_index', 'performance_index']\nperformanceQAT = performanceQAT[perf_cols].set_index('rider').round(2)\nperformanceITA = performanceITA[perf_cols].set_index('rider').round(2)\nperformanceITA.loc[performanceITA.index == 'Lorenzo Savadori', 'constructor'] = 'Aprilia'\n\nsns.relplot(data=performanceQAT, \n            x='pace_consistency_index', \n            y='pace_speed_index', hue='constructor', \n            palette=['red', 'darkorange', 'orange', 'green', 'aqua', 'blue'], \n            # size='points', \n            # sizes=[30, 80], \n            # alpha=0.8, \n            legend='brief', aspect=1.5)\n\nplt.title(\"Qatar 2022\\nPerformance Matrix - Riders\")\nplt.xlabel(\"Relative Consistency Indicator (in seconds)\")\nplt.ylabel(\"Relative Speed Indicator (in seconds)\")\n\nplt.axhline(y=0, color='black', linestyle='-', linewidth=2)\nplt.axvline(x=0, color='black', linestyle='-', linewidth=2)\n\nplt.show()\n\n\n\n\n\nIn the case of Qatar, we can see how this graph helps us clearly visualize the struggle of the Ducati teams in having a consistent pace (with the exception of the winner, Bastianini). The Suzuki team had a good overall performance, both in terms of speed and consistency.\n\n\nCode\nsns.relplot(data=performanceITA[performanceITA['performance_index'] &gt; -3], \n            x='pace_consistency_index', \n            y='pace_speed_index', hue='constructor', \n            palette=['red', 'blue', 'green', 'darkorange', 'orange', 'aqua'], \n            # size='points', \n            # sizes=[30, 80], \n            # alpha=0.8, \n            legend='brief', aspect=1.5)\n\nplt.title(\"Mugello 2022\\nPerformance Matrix - Riders\")\nplt.xlabel(\"Relative Consistency Indicator (in seconds)\")\nplt.ylabel(\"Relative Speed Indicator (in seconds)\")\n\nplt.axhline(y=0, color='black', linestyle='-', linewidth=2)\nplt.axvline(x=0, color='black', linestyle='-', linewidth=2)\n\nplt.show()\n\n\n\n\n\nAt Mugello, it’s interesting to note how the riders who scored points are all grouped in the upper-right quadrant, which means their values for speed and consistency were above average (confirming the demonstrated relationship between the two variables). Only Quartararo (who finished second) demonstrated both consistency and speed among the Yamaha riders, while the other three Yamahas suffered from a noticeable lack of speed that prevented them from scoring points. The Ducati team had a good overall performance, with most of their riders largely confirming their high performance usually demonstrated at their home circuit."
  },
  {
    "objectID": "posts/motogp-performance/index.html#a-performance-based-ranking",
    "href": "posts/motogp-performance/index.html#a-performance-based-ranking",
    "title": "🏍️ Modelling Riders Performance",
    "section": "A performance-based ranking",
    "text": "A performance-based ranking\nThe two variables that quantify the “pace” can be combined to create an index that summarizes a rider’s performance in a single value. We will call this the “performance indicator”, which is an aggregation of the speed and consistency indicators of the pace.\nThe following table shows the results of the Qatar race along with these indicators. Specifically, from left to right, it includes the starting position, finishing position, difference in positions at the finish, points earned, speed indicator, consistency indicator, and the aggregated performance indicator. This results table, ordered by the latter variable, presents a “revisited” ranking based on the performance demonstrated by the riders regardless of the final result and events of the race.\n\n\nCode\nperfQAT = performanceQAT.drop(columns=[\n    'avg_speed', 'avg_laptime', 'delta_avg_laptime',\n    'delta_std_laptime']).sort_values('performance_index', ascending=False).reset_index()\nperfQAT.index += 1\nperfQAT.drop(columns='constructor')\n\n\n\n\n\n\n\n\n\nrider\ngrid\nposition\npos_delta\npoints\npace_speed_index\npace_consistency_index\nperformance_index\n\n\n\n\n1\nBrad Binder\n7\n2.0\n5.0\n20\n0.87\n0.51\n0.69\n\n\n2\nPol Espargaro\n6\n3.0\n3.0\n16\n0.83\n0.52\n0.67\n\n\n3\nEnea Bastianini\n2\n1.0\n1.0\n25\n0.89\n0.39\n0.64\n\n\n4\nMarc Marquez\n3\n5.0\n-2.0\n11\n0.70\n0.59\n0.64\n\n\n5\nAleix Espargaro\n5\n4.0\n1.0\n13\n0.79\n0.39\n0.59\n\n\n6\nJoan Mir\n8\n6.0\n2.0\n10\n0.67\n0.51\n0.59\n\n\n7\nFabio Quartararo\n11\n9.0\n2.0\n7\n0.41\n0.38\n0.40\n\n\n8\nAlex Rins\n10\n7.0\n3.0\n9\n0.49\n0.27\n0.38\n\n\n9\nTakaaki Nakagami\n6\n10.0\n-4.0\n6\n0.21\n0.25\n0.23\n\n\n10\nJohann Zarco\n3\n8.0\n-5.0\n8\n0.41\n-0.06\n0.17\n\n\n11\nFranco Morbidelli\n12\n11.0\n1.0\n5\n0.13\n0.08\n0.10\n\n\n12\nFrancesco Bagnaia\n9\nNaN\n-9.0\n0\n0.12\n-0.09\n0.01\n\n\n13\nJorge Martin\n1\nNaN\n-17.0\n0\n0.12\n-0.28\n-0.08\n\n\n14\nMaverick Viñales\n9\n12.0\n-3.0\n4\n-0.17\n-0.04\n-0.10\n\n\n15\nMiguel Oliveira\n4\nNaN\n-14.0\n0\n0.02\n-0.23\n-0.11\n\n\n16\nAndrea Dovizioso\n10\n14.0\n-4.0\n2\n-0.36\n0.11\n-0.12\n\n\n17\nLuca Marini\n7\n13.0\n-6.0\n3\n-0.35\n0.11\n-0.12\n\n\n18\nAlex Marquez\n8\nNaN\n-10.0\n0\n-0.07\n-0.22\n-0.14\n\n\n19\nMarco Bezzecchi\n5\nNaN\n-13.0\n0\n-0.27\n-0.22\n-0.25\n\n\n20\nJack Miller\n4\nNaN\n-14.0\n0\n-0.23\n-0.35\n-0.29\n\n\n21\nDarryn Binder\n14\n16.0\n-2.0\n0\n-0.98\n0.07\n-0.45\n\n\n22\nRemy Gardner\n12\n15.0\n-3.0\n1\n-0.98\n-0.03\n-0.50\n\n\n23\nFabio Di Giannantonio\n11\n17.0\n-6.0\n0\n-0.99\n-0.06\n-0.53\n\n\n24\nRaul Fernandez\n13\n18.0\n-5.0\n0\n-1.04\n-0.05\n-0.55\n\n\n\n\n\n\n\nIn this “new” ranking (sorted by the aggregated performance indicator), it is interesting to note that the winner (Enea Bastianini), who dominated the race from the first position since the beginning, is relegated to the third position behind Brad Binder and Pol Espargaro. This is due to the fact that these two riders have shown to have a greater speed and consistency than Enea, who, apart from the victory, has equalled the performance of Marc Marquez.\nThe same concept is applied to the race performances of the constructors in the following table.\n\n\nCode\nperfQAT_constr = perfQAT.groupby('constructor')[['pace_speed_index', 'pace_consistency_index', 'performance_index']].mean().sort_values('performance_index', ascending=False).round(2)\n# perfQAT_constr = perfQAT_constr.sort_values('performance_index', ascending=False).reset_index()\n# perfQAT_constr.index += 1\ndisplay(perfQAT_constr)\n\nsns.relplot(data=perfQAT_constr, \n            x='pace_consistency_index', \n            y='pace_speed_index', hue='constructor', \n            palette=['aqua', 'orange', 'green', 'blue', 'red', 'darkorange'], \n            # size='points', \n            # sizes=[30, 80], \n            # alpha=0.8, \n            legend='brief', aspect=1.5)\n\nplt.title(\"Qatar 2022\\nPerformance Matrix - Constructors\")\nplt.xlabel(\"Relative Consistency Indicator (in seconds)\")\nplt.ylabel(\"Relative Speed Indicator (in seconds)\")\n\nplt.axhline(y=0, color='black', linestyle='-', linewidth=2)\nplt.axvline(x=0, color='black', linestyle='-', linewidth=2)\n\nplt.show()\n\n\n\n\n\n\n\n\n\npace_speed_index\npace_consistency_index\nperformance_index\n\n\nconstructor\n\n\n\n\n\n\n\nSuzuki\n0.58\n0.39\n0.48\n\n\nHonda\n0.42\n0.28\n0.35\n\n\nAprilia\n0.31\n0.18\n0.24\n\n\nYamaha\n-0.20\n0.16\n-0.02\n\n\nDucati\n-0.04\n-0.07\n-0.06\n\n\nKTM\n-0.28\n0.05\n-0.12\n\n\n\n\n\n\n\n\n\n\nAs we can see, thanks in part to the performance matrix applied to the constructors, Suzuki was the most “performant” motorcycle in Qatar 2022, along with Honda and Aprilia. Ducati, Yamaha, and KTM had subpar performances."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analytics Portfolio & Blog",
    "section": "",
    "text": "Welcome to my personal repository of analytics and data science notebooks.\nHere, you will find a collection of studies and analyses in which I make use of data visualization, statistical analysis, data mining, and machine learning to extract important insights from data and solve common case studies on various topics such as business management & marketing, social sciences, sports, and much more.\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n🏍️ Modelling Riders Performance\n\n\nLeveraging public race data to boost fans interest in motorsports\n\n\n\n\nmotogpdata\n\n\nMotorsports\n\n\nPublic Data\n\n\nPython\n\n\n\n\nDwelving in the world of MotoGP racing, I illustrate how making use of public race data can provide fans with a more structured and comprehensive understanding of the objective performance of race competitors.\n\n\n\n\n\n\nMay 1, 2023\n\n\nAntonio Buzzelli\n\n\n\n\n\n\n  \n\n\n\n\n🛒 Using Market Basket Analysis to penetrate an untapped regional market\n\n\nCustomer-centric bundle deals with Apriori and association rules\n\n\n\n\nOnline Retail\n\n\nMarketing\n\n\nMarket Basket Analysis\n\n\nPython\n\n\n\n\nThrough the analysis of one year of sales data from an e-commerce website, I was able to identify for the firm a promising market with untapped potential, and implement a marketing strategy to target it using bundle deals tailored to the specific preferences of its consumers.\n\n\n\n\n\n\nApr 2, 2023\n\n\nAntonio Buzzelli\n\n\n\n\n\n\n  \n\n\n\n\n🚢 Understanding Survival on the Titanic\n\n\nUsing machine learning to explain phenomena and define business personas\n\n\n\n\nBusiness Personas\n\n\nMachine Learning\n\n\nPython\n\n\n\n\nBusinesses can utilize machine learning not only to make predictions but also to unveil valuable insights that are deeply embedded in their data. Using one of the most commonly used datasets in the study of data science – the Titanic dataset –, I demonstrate how supervised learning can serve as a data mining technique to achieve a deep understanding of phenomena and generate Personas.\n\n\n\n\n\n\nMar 15, 2023\n\n\nAntonio Buzzelli\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Antonio Buzzelli",
    "section": "",
    "text": "Combining several international experiences in project/business management and a state-of-the-art expertise in data science, my goal is to put at the service of the executive management of a well-established company my capacity to inform data-driven business decisions and strategies."
  }
]